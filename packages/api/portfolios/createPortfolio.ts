import "reflect-metadata";
import cors from "@middy/http-cors";
import jsonBodyParser from "@middy/http-json-body-parser";
import JSONErrorHandlerMiddleware from "middy-middleware-json-error-handler";
import middy from "@middy/core";
import validator from "@middy/validator";
import xssSanitizer from "../portfolioDrafts/xssSanitizer";
import { ApiGatewayEventParsed } from "../utils/eventHandlingTool";
import { APIGatewayProxyResult, Context } from "aws-lambda";
import { ApiSuccessResponse, SuccessStatusCode } from "../utils/response";
import { CORS_CONFIGURATION } from "../utils/corsConfig";
import { createConnection } from "../utils/database";
import { DATABASE_ERROR } from "../utils/errors";
import { errorHandlingMiddleware } from "../utils/errorHandlingMiddleware";
import { IpCheckerMiddleware } from "../utils/ipLogging";
import { IPortfolio, IPortfolioCreate } from "../../orm/entity/Portfolio";
import { PortfolioRepository } from "../repository/PortfolioRepository";
import { validateRequestShape } from "../utils/shapeValidator";
import { wrapSchema } from "../utils/schemaWrapper";
import internalSchema = require("../models/internalSchema.json");

/**
 * Creates a new Portfolio
 * A new portfolioId will be generated by the database.
 *
 * @param event - The POST request from API Gateway
 */
export async function baseHandler(
  event: ApiGatewayEventParsed<IPortfolio>,
  context?: Context
): Promise<APIGatewayProxyResult> {
  validateRequestShape<IPortfolio>(event);

  // set up database connection
  const connection = await createConnection();
  const insertedPortfolios: IPortfolioCreate[] = [];

  try {
    const setupResult = validateRequestShape<IPortfolio>(event);
    const portfolioBody = setupResult.bodyObject;

    const insertResult = await connection.getCustomRepository(PortfolioRepository).createPortfolio(portfolioBody);

    for (const portfolio of insertResult.identifiers) {
      // the result from the insert method does not have the name property
      // and an additional query after the insert is done to provide the correct shape
      // to be returned to the client
      const queryInsertedPortfolio = await connection.getCustomRepository(PortfolioRepository).findOneOrFail({
        select: [
          "id",
          "name",
          "csp",
          "description",
          "dodComponents",
          "owner",
          "portfolioManagers",
          "createdAt",
          "updatedAt",
          "archivedAt",
          "administrators",
          "provisioningStatus",
        ],
        where: { id: portfolio.id },
      });

      insertedPortfolios.push(queryInsertedPortfolio);
      console.log("Inserted Portfolio: " + JSON.stringify(queryInsertedPortfolio));
    }
  } catch (error) {
    console.error("Database error: " + error);
    return DATABASE_ERROR;
  } finally {
    connection.close();
  }

  return new ApiSuccessResponse<IPortfolioCreate>(insertedPortfolios[0], SuccessStatusCode.CREATED);
}

export const handler = middy(baseHandler)
  .use(IpCheckerMiddleware())
  .use(xssSanitizer())
  .use(jsonBodyParser())
  .use(validator({ inputSchema: wrapSchema(internalSchema.Portfolio) }))
  .use(errorHandlingMiddleware())
  .use(JSONErrorHandlerMiddleware())
  .use(cors(CORS_CONFIGURATION));
