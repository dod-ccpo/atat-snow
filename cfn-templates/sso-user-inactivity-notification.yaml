---
AWSTemplateFormatVersion: "2010-09-09"

Resources:
#EVENT TRIGGER
  OpsCreateSsoUserEventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "EventRule for SSO User Creation"
      EventPattern: 
        detail-type: 
          - "AWS API Call via CloudTrail"
        detail: 
          eventSource: 
            - sso-directory.amazonaws.com
          eventName:
            - CreateUser
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            !GetAtt AtatLambdaSsoEnabledFunction.Arn
          Id: "OpsTopic"

#EVENT TRIGGER
  OpsEnableSsoUserEventRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "EventRule for Enabling Users"
      EventPattern: 
        detail-type: 
          - "AWS API Call via CloudTrail"
        detail: 
          eventSource: 
            - sso-directory.amazonaws.com
          eventName:
            - EnableUser
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            !GetAtt AtatLambdaSsoEnabledFunction.Arn
          Id: "OpsTopic"

  SampleManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Sid: AllowAllUsersToListAccounts
            Effect: Allow
            Action: sns:*
            Resource: "*"

  AtatLambdaSsoRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - lambda.amazonaws.com
            Action: sts:AssumeRole
      PermissionsBoundary: !Sub "arn:aws-us-gov:iam::238416677543:policy/GovCloudAdminRoleBoundary"
      Path: /
      ManagedPolicyArns: 
        - !Ref SampleManagedPolicy

#LAMBDA FUNCTION
  AtatLambdaSsoEnabledFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AtatLambdaSsoFunction
      Role: !GetAtt AtatLambdaSsoRole.Arn
      Runtime: nodejs16.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async function(event, context) {
            console.log("ENVIRONMENT VARIABLES\n" + JSON.stringify(process.env, null, 2))
            console.info("EVENT\n" + JSON.stringify(event, null, 2))
            console.warn("Event not processed.")
            return context.logStreamName
          }

  AtatSnsTopicSso:
    Type: AWS::SNS::Topic
    Properties: 
      # Subscription: 
      #   - Subscription
      TopicName: Atat-Sso-User-Lambda-Topic
        
  AtatSsoSnsLambda:
    Type: AWS::Lambda::EventInvokeConfig
    Properties: 
      DestinationConfig:
          OnSuccess:
            Destination: !Ref AtatSnsTopicSso
      FunctionName: !Ref AtatLambdaSsoEnabledFunction
      # MaximumEventAgeInSeconds: Integer
      # MaximumRetryAttempts: Integer
      Qualifier: $LATEST

  AtatSsoUserEnabledSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: zachary.j.mcclurg.ctr@mail.mil
      Protocol: email
      TopicArn: !Ref AtatSnsTopicSso


