<?xml version="1.0" encoding="UTF-8"?><database>
    <element db_object_id="350411e7472321109053e4be436d434b" label="DAPPS:Funding Plan" max_length="40" name="x_g_dis_atat_funding_plan" type="collection">
        <element label="Attachment" max_length="40" name="attachment" type="file_attachment"/>
        <element label="Estimated Task Order Value" max_length="20" name="estimated_task_order_value" type="currency"/>
        <element label="Extension" max_length="40" name="extension" type="string"/>
        <element label="File Name" max_length="100" name="file_name" type="string"/>
        <element label="Initial Amount" max_length="20" name="initial_amount" type="currency"/>
        <element calculation="(function calculatedFieldValue(current) {&#10;&#9;return current.estimated_task_order_value - current.initial_amount;&#10;})(current);" label="Remaining Amount" max_length="20" name="remaining_amount" type="currency" virtual="true"/>
        <element label="Remaining Amount Increments" max_length="4000" name="remaining_amount_increments" reference="x_g_dis_atat_funding_increment" type="glide_list"/>
        <element calculation="(function calculatedFieldValue(current) {&#10;&#9;var newline = '\n';&#10;&#9;var increments = current.remaining_amount_increments.split(&quot;,&quot;);&#10;&#9;var ouputArray = [];&#10;&#9;for (var i=0; i&lt;increments.length; i++) {&#10;      var increment = new GlideRecord('x_g_dis_atat_funding_increment');&#10;      increment.get(increments[i]);&#10;      // format like 'Funding Increment #X:\nX QTR FYXX - $XX'&#10;      var line = '';&#10;      line += 'Funding Increment #';&#10;      line += increment.order;&#10;      line += ':';&#10;      line += newline;&#10;      line += increment.description;&#10;      line += ' - ';&#10;      line += increment.getDisplayValue('amount');&#10;      ouputArray.push(line);&#10;    }&#10;&#9;// the List of remaining_amount_increments has a natural order,&#10;&#9;// however we want to order the ouput by the value of Funding Increment.Order&#10;&#9;// the sort() here satisfies that need due to inclusion of Order first in each formatted line&#10;&#9;return ouputArray.sort().join(newline + newline);&#10;})(current);" label="Schedule Text" max_length="500" name="schedule_text" type="string" virtual="true"/>
    </element>
</database>
