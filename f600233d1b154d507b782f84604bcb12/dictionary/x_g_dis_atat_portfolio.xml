<?xml version="1.0" encoding="UTF-8"?><database>
    <element db_object_id="e152d508db47d99088887ea5f39619d2" label="ATAT:Portfolio" max_length="40" name="x_g_dis_atat_portfolio" type="collection">
        <element label="Acquisition Package" max_length="32" name="acquisition_package" reference="x_g_dis_atat_acquisition_package" type="reference"/>
        <element label="Active Task Order" max_length="32" name="active_task_order" reference="x_g_dis_atat_task_order" type="reference"/>
        <element label="Agency" max_length="32" name="agency" reference="x_g_dis_atat_agency" type="reference"/>
        <element label="CSP" max_length="32" name="csp" reference="x_g_dis_atat_cloud_service_provider" type="reference"/>
        <element label="CSP ID" max_length="2000" name="csp_id" type="string"/>
        <element label="Description" max_length="4000" name="description" type="string"/>
        <element label="Is_Archived" max_length="40" name="is_archived" type="boolean"/>
        <element label="Last Updated" max_length="40" name="last_updated" type="glide_date_time"/>
        <element display="true" label="Name" max_length="60" name="name" type="string"/>
        <element active="false" label="Pending Operators" max_length="4000" name="operators" reference="x_g_dis_atat_operator" type="glide_list"/>
        <element attributes="edge_encryption_enabled=true" calculation="(function calculatedFieldValue(current) {&#10;    const sysId = current.sys_id;&#10;    const toTable = &quot;x_g_dis_atat_task_order&quot;;&#10;    const clinTable = &quot;x_g_dis_atat_clin&quot;;&#10;    const toGr = new GlideRecord(toTable);&#10;    const clinGr = new GlideRecord(clinTable);&#10;&#10;    toGr.get(current.active_task_order);&#10;    if (toGr.isValidRecord()) {&#10;        const clinsInPeriod = [];&#10;        const allClins = [];&#10;        // split clins into array&#10;        const toClins = toGr.clins.split(',');&#10;        // loop through array, validate valid clin and structure data&#10;        toClins.forEach((clin) =&gt; {&#10;            const isValidClin = clinGr.get(clin);&#10;            if (isValidClin) {&#10;                const cs = new ClinService(clinGr);&#10;                if (cs.hasStarted &amp;&amp; !cs.hasExpired) {&#10;                    const status = cs.determineStatus();&#10;                    const clinNumber = clinGr.clin_number.toString();&#10;                    const hasObligatedFunds = cs.hasObligatedFunds;&#10;                    const clinData = {&#10;                        status: status,&#10;                        clinNumber: clinNumber,&#10;                        hasFunds: hasObligatedFunds&#10;                    };&#10;                    clinsInPeriod.push(clinData);&#10;                    allClins.push(clinData);&#10;                } else {&#10;                    const status = cs.determineStatus();&#10;                    const clinNumber = clinGr.clin_number.toString();&#10;                    const hasObligatedFunds = cs.hasObligatedFunds;&#10;                    const clinData = {&#10;                        status: status,&#10;                        clinNumber: clinNumber,&#10;                        hasFunds: hasObligatedFunds&#10;                    };&#10;                    allClins.push(clinData);&#10;                }&#10;            }&#10;        });&#10;&#10;        if (allClins.length &gt; 0) {&#10;            // cache the metrics of both allClins and clinsInPeriod.&#10;            // This helps avoid multiple loops through each array of clins&#10;            const allClinsBreakdown = {};&#10;            const clinsInPeriodBreakdown = {};&#10;            // collect the number of each status in allClins&#10;            allClins.forEach((clin) =&gt; {&#10;                if (allClinsBreakdown[clin.status]) {&#10;                    allClinsBreakdown[clin.status]++;&#10;                } else {&#10;                    allClinsBreakdown[clin.status] = 1;&#10;                }&#10;            });&#10;            allClinsBreakdown.length = allClins.length;&#10;            // collect the number of each status in clinsInPeriod&#10;            clinsInPeriod.forEach((clin) =&gt; {&#10;                if (clinsInPeriodBreakdown[clin.status]) {&#10;                    clinsInPeriodBreakdown[clin.status]++;&#10;                } else {&#10;                    clinsInPeriodBreakdown[clin.status] = 1;&#10;                }&#10;            });&#10;            clinsInPeriodBreakdown.length = clinsInPeriod.length;&#10;&#10;            //  if all CLINs in all periods have status Expired&#10;            if (allClinsBreakdown.EXPIRED &amp;&amp; allClinsBreakdown.EXPIRED === allClinsBreakdown.length) {&#10;                return &quot;EXPIRED&quot;;&#10;            }&#10;            //  if any CLIN in current period has status Delinquent&#10;            if (clinsInPeriodBreakdown.DELINQUENT &amp;&amp; clinsInPeriodBreakdown.DELINQUENT &gt; 0) {&#10;                return &quot;DELINQUENT&quot;;&#10;            }&#10;            //  if any CLIN in current period has status At-Risk OR if FUNDING_AT_RISK&#10;            if (clinsInPeriodBreakdown.FUNDING_AT_RISK &amp;&amp; clinsInPeriodBreakdown.FUNDING_AT_RISK &gt; 0 ||&#10;                clinsInPeriodBreakdown.AT_RISK &amp;&amp; clinsInPeriodBreakdown.AT_RISK &gt; 0) {&#10;                return &quot;AT_RISK&quot;;&#10;            }&#10;            // All CLINs in current period  are Expiring PoP and no follow-on CLIN with obligated funds. If there are follow-on CLIN(s) with obligated               funds, status is On-Track and donâ€™t display an Expiring Soon badge.&#10;            if (clinsInPeriodBreakdown.EXPIRING_POP &amp;&amp; clinsInPeriodBreakdown.EXPIRING_POP === clinsInPeriodBreakdown.length) {&#10;                const expectedClins = clinsInPeriod.map((clin) =&gt; {&#10;                    let firstTwo = clin.clinNumber.slice(0, 2);&#10;                    const lastTwo = clin.clinNumber.slice(2, clin.clinNumber.length);&#10;                    let expectedClin = &quot;&quot;;&#10;                    // if 2nd number in firstTwo is less than 10, increment the number and pad a 0&#10;                    if (parseInt(firstTwo) &lt; 10) {&#10;                        firstTwo = (parseInt(firstTwo) + 1).toString();&#10;                        expectedClin = firstTwo.padStart(2, '0') + lastTwo;&#10;                    } else {&#10;                        // else just increment the number, string it and add them together&#10;                        firstTwo = (parseInt(firstTwo) + 1).toString();&#10;                        expectedClin = firstTwo + lastTwo;&#10;                    }&#10;                    return expectedClin;&#10;                });&#10;                const hasFollowOns = allClins.some((clin) =&gt; {&#10;                    if (expectedClins.some((expected) =&gt; clin.clinNumber === expected &amp;&amp; clin.hasFunds)) {&#10;                        return true;&#10;                    }&#10;                });&#10;                if (!hasFollowOns) {&#10;                    return &quot;EXPIRING_SOON&quot;;&#10;                }&#10;            }&#10;        }&#10;        return 'ON_TRACK';&#10;    }&#10;})(current);" choice="1" label="Funding Status" max_length="40" name="portfolio_funding_status" type="choice" virtual="true">
            <choice>
                <element inactive_on_update="false" label="On-Track" sequence="1" value="ON_TRACK"/>
                <element inactive_on_update="false" label="At-Risk" sequence="2" value="AT_RISK"/>
                <element inactive_on_update="false" label="Funding At-Risk" sequence="3" value="FUNDING_AT_RISK"/>
                <element inactive_on_update="false" label="Expired" sequence="4" value="EXPIRED"/>
                <element inactive_on_update="false" label="Delinquent" sequence="5" value="DELINQUENT"/>
                <element inactive_on_update="false" label="Expiring Soon" sequence="6" value="EXPIRING_SOON"/>
            </choice>
        </element>
        <element label="Portfolio Managers" max_length="4000" name="portfolio_managers" reference="sys_user" type="glide_list"/>
        <element label="Portfolio Owner" max_length="32" name="portfolio_owner" reference="sys_user" type="reference"/>
        <element calculation="(function calculatedFieldValue(current) {&#10;&#9;const sysId = current.sys_id;&#10;    const PORTFOLIO_TABLE = &quot;x_g_dis_atat_portfolio&quot;;&#10;    let gr = new GlideRecord(PORTFOLIO_TABLE);&#10;    gr.get(sysId);&#10;    if (gr.isValidRecord()) {&#10;&#9;&#9;const ps = new PortfolioService(gr);&#10;        const status = ps.determineStatus(gr);&#10;        return status;&#10;    }&#10;&#10;})(current);" choice="1" label="Portfolio Status" max_length="40" name="portfolio_status" type="choice" virtual="true">
            <choice>
                <element inactive_on_update="false" label="Processing" sequence="1" value="PROCESSING"/>
                <element inactive_on_update="false" label="Provisioning Issue" sequence="2" value="PROVISIONING_ISSUE"/>
                <element inactive_on_update="false" label="Active" sequence="3" value="ACTIVE"/>
                <element inactive_on_update="false" label="Archived" sequence="4" value="ARCHIVED"/>
            </choice>
        </element>
        <element label="Portfolio Viewers" max_length="4000" name="portfolio_viewers" reference="sys_user" type="glide_list"/>
        <element label="Provisioned" max_length="40" name="provisioned" type="boolean"/>
        <element label="Provisioned Date" max_length="40" name="provisioned_date" type="glide_date_time"/>
        <element active="false" label="Provisioning Failure Cause" max_length="100" name="provisioning_failure_cause" type="string"/>
        <element label="Provisioning Request Date" max_length="40" name="provisioning_request_date" type="glide_date_time"/>
        <element choice="1" choice_field="vendor" choice_table="x_g_dis_atat_cloud_service_provider" label="Vendor" max_length="40" name="vendor" type="choice">
            <choice>
                <element inactive_on_update="false" label="Amazon Web Services" sequence="0" value="AWS"/>
                <element inactive_on_update="false" label="Google Cloud Platform" sequence="1" value="GCP"/>
                <element inactive_on_update="false" label="Microsoft Azure" sequence="2" value="AZURE"/>
                <element inactive_on_update="false" label="Oracle Cloud" sequence="3" value="ORACLE"/>
            </choice>
        </element>
        <index name="index">
            <element name="acquisition_package"/>
        </index>
        <index name="index2">
            <element name="active_task_order"/>
        </index>
        <index name="index3">
            <element name="agency"/>
        </index>
        <index name="index4">
            <element name="csp"/>
        </index>
        <index name="index5">
            <element name="portfolio_owner"/>
        </index>
    </element>
</database>
