<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.AtatHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>ATAT class that contains commonly used utility functions that can be used throughout the application.</description>
        <name>AtatHelper</name>
        <script><![CDATA[var AtatHelper = Class.create();
AtatHelper.prototype = {
	M2M_CONTACTS_TABLE: "x_g_dis_atat_m2m_contacts_acquisition",
	CONTACTS_TABLE: "x_g_dis_atat_contacts",
	PERIOD_TABLE: "x_g_dis_atat_period",
	USER_TABLE: "sys_user",
	errUtil: new ErrorHandler(),

	initialize: function() {
	},

	getVendorFullName: function(vendor) {
		return {
			"AWS": "Amazon Web Services",
			"GCP": "Google Support Services",
			"Azure": "Microsoft Corporation",
			"Oracle": "Oracle America"
		}[vendor];			
	},

	/**
	* Finds the first Mission Owner of the Acquisition Package, if it exists
	* return User
	*/
	getFirstMissionOwner: function(acquisitionPackage) {
		var missionOwners = acquisitionPackage.mission_owners;
		if (missionOwners) {
			var array = missionOwners.split(",");
			if (array.length > 0) {
				var user = new GlideRecord(this.USER_TABLE);
				user.get(array[0]);
				return user;
			}			
		}
		throw this.errUtil.createError("No Mission Owners found for this Acquisition Package.", this.errUtil.INVALID_INPUT);				
	},
	
	/**
   * Query for many-to-many (m2m) contact records that associate the contacts and
   * acquisition package records. A limit of records to can be provided but
   * defaults to 50. 
   *
   * @param {(string | GlideRecord)} packageSysId - package sysId (or package GlideRecord)
   * @param {number} [limit=50] - max records to return
   * @return {string[]} an array of m2m contact record sysIds 
   */
	getAssociatedContacts: function(packageSysId, returnLimit) {
		try {
			var limit = returnLimit ? returnLimit : 50;
			return new global.GlideQuery(this.M2M_CONTACTS_TABLE)
				.where("acquisition_package", packageSysId)
				.select(["contacts"])
				.map(function(m2m) { return m2m.contacts; })
				.toArray(limit);
		} catch (error) {
			throw this.errUtil.createError(
				"AtatHelper --> getAssociatedContacts() " + error,
				this.errUtil.METHOD_ERROR
			);
		}
	},
	/**
   * Query package contacts and sort based on type for the Mission Owner,
   * COR, ACOR, Financial POC and the remainder as Other. The field "type"
   * is required.
   *
   * @param {string[]} contactIds - contact record sysIds
   * @param {string[]} fields - columns to be returned from the query 
   * @param {number} [limit=50] - limit of contacts to return from query
   * @return {object} object that contains the sorted contact types
   */
	getContactsInfo: function(contactIds, fields, returnLimit) {
		try {
			if (!listContains("type", fields)) {
				throw this.errUtil.createError(
					"AtatHelper --> getContactsInfo(): The 'type' field is missing.",
					this.errUtil.INVALID_INPUT
				);
			}

			var limit = returnLimit ? returnLimit : 50;
			var contacts = { mo: [], cor: [], acor: [], finPoc: [], other: [] };

			new global.GlideQuery(this.CONTACTS_TABLE)
				.where("sys_id", "IN", contactIds)
				.select(fields)
				.toArray(limit)
				.map(removeSysId)
				.forEach(function(contact) {
				switch (contact.type) {
					case "MISSION_OWNER":
						contacts["mo"].push(contact);
						break;
					case "COR":
						contacts["cor"].push(contact);
						break;
					case "ACOR":
						contacts["acor"].push(contact);
						break;
					case "FINANCIAL_POC":
						contacts["finPoc"].push(contact);
						break;
					default:
						contacts["other"].push(contact);
				}
			});
			return contacts;
		} catch (error) {
			var newError = this.errUtil.createError(
				"AtatHelper --> getContactsInfo() " + error,
				this.errUtil.METHOD_ERROR
			);
			this.errUtil.errorLogger(newError);
		}
	},
	/**
   * Construct the full FOIA address based on the parts stored
   * in the Sensitive Information table.
   *
   * @param {GlideRecord} sensitiveInfo - package sensitive information record
   * @return {string} complete FOIA address
   */
	constructFoiaAddress: function(sensitiveInfo) {
		var str1 = sensitiveInfo.foia_street_address_1;
		var str2 = sensitiveInfo.foia_street_address_2;
		var city = sensitiveInfo.foia_city_apo_fpo;
		var state = sensitiveInfo.foia_state_province_state_code;
		var zip = sensitiveInfo.foia_zip_postal_code;
		var country = sensitiveInfo.foia_country;
		return this.constructAddress(str1, str2, city, state, zip, country);
	},
	
	constructAddress: function(str1, str2, city, state, zip, country) {
		var line1 = str1;
		if (str2.length > 0) {
			line1 += ", " + str2;
		}
		line1 += "\n";
		var line2 = city + ", " + state + " " + zip + "\n";
		var line3 = country;
		return line1 + line2 + line3;		
	},
	
	/**
   * Query for Periods.
   *
   * @param {string[]} periodIds - list of period ids to retrieve
   * @return {Optional[]} array of periods
   */
	getPeriods: function(periodIds) {
		try {
			var periodFields = ["period_type", "period_unit_count", "period_unit", "option_order"];
			return getListRecords(
				periodIds,
				periodFields,
				this.PERIOD_TABLE
			);
		} catch (error) {
			var errorMessage = "AtatHelper --> getPeriods(): " + error;
			throw this.errUtil.createError(errorMessage, this.errUtil.METHOD_ERROR);
		}
	},
	/**
   * Format periods properties into camelCase to support sending to HOTH application.
   *
   * @param {array} periods - an array of periods
   * @return {array} of periods with camelCase properties
   */
	mapPeriods: function(periods) {
		return periods.map(function(period) {
			// map properties according to HOTH API
			period.periodType = period.period_type;
			period.periodUnitCount = period.period_unit_count;
			period.periodUnit = period.period_unit;
			period.optionOrder = period.option_order;

			// remove old properties	
			delete period.period_type;
			delete period.period_unit_count;
			delete period.period_unit;
			delete period.option_order;

			return period;
		});
	},
	/**
   * Map periods ids for a given package to allow easier retrieval for the
   * different instances.
   *
   * @param {array} periods - PoP periods
   * return {object} an object contianing Id mapping of each period for a PoP
   */
	mapPackagePeriods: function(periods) {
		var mappedPeriods = {};
		if (periods) {
			this.mapPeriods(periods)
				.forEach(function(period) {
				var id = period.sys_id;
				delete period.sys_id;
				mappedPeriods[id] = period;
			});
		}

		return mappedPeriods;
	},
	/**
   * Convert object properties from snake_case to camelCase
   * to match with HOTH API specification
   *
   * @param {array} records - object records in snake_case to be converted
   * @param {array} fields - fields to covert into camelCase
   * @return {array} an array of objects with camelCase properties
   */
	snakeToCamelCase: function(records, fields) {
		if (!records) {
			gs.warn("No records found to transform into camelCase.");
			return [];
		}
		try {
			var snakeToCamelFieldMapping = {};
			fields.forEach(function(snakeField) {
				var camelField = snakeField 
				.split("_")
				.map(function(word) { return word[0].toUpperCase() + word.slice(1); })
				.join("");

				// ensure first word is lower case 
				snakeToCamelFieldMapping[snakeField] = camelField[0].toLowerCase() + camelField.slice(1);
			});

			return records.map(function(record) {
				var convertedRecord = {};
				for (var snakeField in snakeToCamelFieldMapping) {
					var camelField = snakeToCamelFieldMapping[snakeField];
					convertedRecord[camelField] = record[snakeField];
				}

				return convertedRecord;
			});

		} catch (error) {
			throw this.errUtil.createError(
				"AtatHelper --> snakeToCamelCase(): " + error,
				this.errUtil.METHOD_ERROR
			);
		}

	},

	/**
   * Looks up static metadata based on the given filename
   *
   * @param {string} packageSysId - package sysId (or package GlideRecord)
   * @return {} an object representing metadata for the given filename
   */
	getDocumentMetadata: function(filename) {
		var metadata = {
			"EvaluationPlan.docx": {
				abbreviation: "EP",
				description: "Evaluation Plan",
				edmsDocumentType: "009 - Source Selection Documents (includes PEPs & SRDs)"
			},
			"IncrementalFundingPlan.docx": {
				abbreviation: "IFP",
				description: "Incremental Funding Plan",
				edmsDocumentType: "003 - Requirements Package Documents (to include Req Checklist, Section 508, IGCE, etc)"
			},
			"RequirementsChecklist.docx": {
				abbreviation: "RC",
				description: "Requirements Checklist, to include Section 508",
				edmsDocumentType: "003 - Requirements Package Documents (to include Req Checklist, Section 508, IGCE, etc)"
			},
			"DescriptionOfWork.docx": {
				abbreviation: "DoW",
				description: "Description of Work",
				edmsDocumentType: "007 - SOW/PWS/SOO/CDRL/DID/DD 254 - ALL Revisions (but see Tab 42)"
			},
			"IGCE.xlsx": {
				abbreviation: "IGCE",
				description: "IGCE",
				edmsDocumentType: "003 - Requirements Package Documents (to include Req Checklist, Section 508, IGCE, etc)"
			},
			"Justification and Approval.docx": {
				abbreviation: "J&A",
				description: "Justification and Approval",
				edmsDocumentType: "006 - J&A for Other Than Full & Open Competition"				
			},
			"Market Research Report.docx": {
				abbreviation: "MRR",
				description: "Market Research Report",
				edmsDocumentType: "005 - Acquisition Plan; Market Research; Acquisition Planning Support Documentation"				
			}
		};
		var entry = metadata[filename];
		if (!entry) {
			return {
				abbreviation: "MISC",
				description: filename.split(".").shift(),
				edmsDocumentType: "003 - Requirements Package Documents (to include Req Checklist, Section 508, IGCE, etc)"
			};
		}
		else {
			return entry;
		}
	},
	

	/**
   * Query a table and find records related to a package. 
   * Only the first 100 records are returned.
   *
   * @param {string} table - table to query for related package records
   * @return {array} records found from querying a table
   */
    //TODO refactor Dow to use this method
	findPackageRecords: function(table, packageSysId) {
		var packageId = packageSysId ? packageSysId : this.acquisitionPackage.sys_id;
		var limit = 100; // max limit for toArray()

		// composed fields to avoid unexpected side affects when using arrUtil.concat()
		var contractInfoFields = Dow.prototype.getTableFields(Dow.prototype.CURRENT_CONTRACT_INFO_TABLE);
		var CONTRACT_TABLE = 'x_g_dis_atat_current_contract_and_recurring_information';
		switch (table) {
			// case Dow.prototype.ENV_INST_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(envInstFields)
			// 		.toArray(limit);
			// case Dow.prototype.CUR_ENV_INST_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(currentEnvInstFields)
			// 		.toArray(limit);
			// case Dow.prototype.COMP_ENV_INST_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(computeEnvInstFields)
			// 		.toArray(limit);
			// case Dow.prototype.DB_ENV_INST_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(databaseEnvInstFields)
			// 		.toArray(limit);
			// case Dow.prototype.STORAGE_ENV_INST_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(envInstFields)
			// 		.toArray(limit);
			// case Dow.prototype.GENERAL_XAAS_ENV_INST_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(envInstFields)
			// 		.toArray(limit);
			// case Dow.prototype.CLOUD_SUP_ENV_INST_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(cloudSupportEnvInstFields)
			// 		.toArray(limit);
			// case Dow.prototype.SELECTED_SER_OFF_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(Dow.prototype.SELECTED_SER_OFF_FIELDS)
			// 		.toArray(limit);
			// case Dow.prototype.SELECTED_CLASS_LVL_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(Dow.prototype.SELECTED_CLASS_LVL_FIELDS)
			// 		.toArray(limit);
			// case Dow.prototype.REQUIREMENTS_COST_EST_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(Dow.prototype.REQUIREMENTS_COST_EST_FIELDS)
			// 		.toArray(limit);
			// case Dow.prototype.ARCH_DESIGN_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(Dow.prototype.ARCH_DESIGN_FIELDS)
			// 		.toArray(limit);
			// case Dow.prototype.SECURITY_REQUIREMENT_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(Dow.prototype.SECURITY_REQUIREMENT_FIELDS)
			// 		.toArray(limit);
			// case Dow.prototype.CROSS_DOMAIN_SOLN_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(Dow.prototype.CROSS_DOMAIN_SOLN_FIELDS)
			// 		.toArray(limit);
			// case Dow.prototype.TRAVEL_REQUIREMENT_TABLE:
			// 	return new global.GlideQuery(table)
			// 		.where("acquisition_package", packageId)
			// 		.select(Dow.prototype.TRAVEL_REQUIREMENT_FIELDS)
			// 		.toArray(limit);
			case CONTRACT_TABLE:
				return new global.GlideQuery(table)
					.where("acquisition_package", packageId)
                     // most recent expired contract on top (index 0)
					.orderByDesc("contract_order_expiration_date")
					.select(contractInfoFields)
					.toArray(limit);
			default:
				gs.warn("Table " + table + " is not known to be associated with a package.");
				return [];
		}

	},
  /**
   * Determines if a record is not null
   *
   * @param {GlideRecord} record - record returned from query using GlideQuery
   * @return - return true if record is not null
   */
  recordNotNull: function(record) {
    try {
      if (record === null) {
        return false;
      }
      return true;
    } catch (error) {
      throw this.errUtil.createError(
        "AtatHelper --> recordNotNull(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }
  },
  /**
   * Infer the classification level and type using the CLIN number
   *
   * @param {string} clinNumber
   * @return {Object} an object with the classification and type of the CLIN
   */
  getClinTypeAndLevel: function(clinNumber) {
    try {
      if (!clinNumber || clinNumber.length !== 4) {
        return undefined;
      }
      switch (clinNumber.substring(2)) {
        case '01':
        case '17':
          return { classificationLevel: "U", type: "CLOUD" };
        case '03':
        case '19':
          return { classificationLevel: "S", type: "CLOUD" };
        case '05':
        case '21':
          return { classificationLevel: "TS", type: "CLOUD" };
        default:
          return { type: "NON_CLOUD" };
      }
    } catch (error) {
      throw this.errUtil.createError(
        "AtatHelper --> getClinTypeAndLevel(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }
  },

	type: 'AtatHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>julius.fitzhugh-ctr</sys_created_by>
        <sys_created_on>2022-12-02 20:49:47</sys_created_on>
        <sys_id>9027655d97a7d5106fa8b4b3f153afba</sys_id>
        <sys_mod_count>25</sys_mod_count>
        <sys_name>AtatHelper</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_9027655d97a7d5106fa8b4b3f153afba</sys_update_name>
        <sys_updated_by>1370228783.CTR</sys_updated_by>
        <sys_updated_on>2023-05-26 18:33:38</sys_updated_on>
    </sys_script_include>
</record_update>
