<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.IncidentTicketHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>This script is responsible for consuming a failed event and generating an incident ticket.</description>
        <name>IncidentTicketHelper</name>
        <script><![CDATA[var IncidentTicketHelper = Class.create();
IncidentTicketHelper.prototype = {
    ASSIGNMENT_GROUP_NAME: 'T2 DAPPS / ATAT',
    CATEGORY: 'software',
    IMPACT: 3,
    INCIDENT_TABLE: 'incident',
    URGENCY: 3,
    USER_GROUP_TABLE: 'sys_user_group',

    initialize: function() {

    },

    processEvent: function(event) {
        // retrieve sys_id for assignment group
        // this is dynamic rather than static to accomodate multiple environments
        const assignmentGroup = new global.GlideQuery(this.USER_GROUP_TABLE)
            .where('name', this.ASSIGNMENT_GROUP_NAME)
            .selectOne('sys_id')
            .orElse('');
		
        const descriptions = this.generateDescriptions(event);
		
		
        const incident = {
            assignment_group: assignmentGroup.sys_id ?? "",
            category: this.CATEGORY,
            description: descriptions.description,
            impact: this.IMPACT,
            short_description: descriptions.short_description,
            urgency: this.URGENCY,
			watch_list: event.initialSnowRequest.userId ?? ""
        };
		
        // default SNOW behavior is to auto-increment the incident ID.
        const incidentGq = new global.GlideQuery(this.INCIDENT_TABLE)
            .insert(incident);
    },

    generateDescriptions: function(event) {
        const {
            content,
            initialSnowRequest
        } = event;

        const provisioningJobId = content.response.status.provisioningJobId;
        const portfolioId = content.response.status.portfolioId;
        const status = content.response.status.status;

        const operationType = initialSnowRequest.operationType;
        const targetCsp = initialSnowRequest.targetCsp.name;
        const userId = initialSnowRequest.userId;

        return descriptions = {
            description: `Provisioning Job sys_id ${provisioningJobId} status is: ${status}; operation ${operationType} failed for portfolio sys_id ${portfolioId} affecting user sys_id ${userId}.`,
            short_description: `Provisioning Job ${provisioningJobId} status is ${status}.`
        };
    },
	
    type: 'IncidentTicketHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>stephen.hayes</sys_created_by>
        <sys_created_on>2023-10-03 13:39:05</sys_created_on>
        <sys_id>d4d8b25747213110ee827d7ba26d431b</sys_id>
        <sys_mod_count>55</sys_mod_count>
        <sys_name>IncidentTicketHelper</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_d4d8b25747213110ee827d7ba26d431b</sys_update_name>
        <sys_updated_by>stephen.hayes</sys_updated_by>
        <sys_updated_on>2023-10-30 21:19:21</sys_updated_on>
    </sys_script_include>
</record_update>
