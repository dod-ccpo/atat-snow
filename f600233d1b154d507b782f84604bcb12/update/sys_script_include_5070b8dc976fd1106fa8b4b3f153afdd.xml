<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.Ifp</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>ATAT class for creating an Incremental Funding Plan (IFP) payload and related functionality.&#13;
Payload is sent to the HOTH API for document generation.&#13;
</description>
        <name>Ifp</name>
        <script><![CDATA[var Ifp = Class.create();
Ifp.prototype = {
	M2M_CONTACTS_TABLE:  "x_g_dis_atat_m2m_contacts_acquisition",
	FUNDING_INCREMENT_TABLE: "x_g_dis_atat_funding_increment",
	errUtil: new ErrorHandler(),
	acquisitionPackage: null,

	initialize: function(acqPackage) {
		this.acquisitionPackage = acqPackage;
	},
	
	/**
	* Finds the first Mission Owner of the Acquisition Package, if it exists
	* return User
	*/
	getFirstMissionOwner: function() {
		var missionOwners = this.acquisitionPackage.mission_owners;
		if (missionOwners) {
			var array = missionOwners.split(",");
			if (array.length > 0) {
				return array[0];
			}			
		}
		throw this.errUtil.createError("No Mission Owners found for this Acquisition Package.", this.errUtil.INVALID_INPUT);				
	},

	/**
     * Look up a funding request type inside of a Funding Requirement
     * record for a given acquisition package. 
     *
     * @param {GlideRecord} - Funding Request record
     * return {object} - funding document information (e.g., MIPR number)
     */
	getFundingDocument: function(fundingRequest) {
		try {
			var fundingType = fundingRequest.funding_request_type.toString();
			if (!fundingType) {
				var pkgInfo = this.errUtil.getRecordLogInfo(this.acquisitionPackage, "number");
				var errorMessage = "No fundingType found for " + pkgInfo.allInfo + ". ";
				errorMessage += "Please provide Funding Request." ;
				throw this.errUtil.createError(errorMessage, this.errUtil.RECORD_NOT_FOUND);
			}

			if (fundingType === "MIPR") {
				return {
					fundingType: fundingType,
					miprNumber: fundingRequest.mipr.mipr_number.toString(),
				};
			}

			return {
				fundingType: fundingType, // FS_FORM
				orderNumber: fundingRequest.fs_form.order_number.toString(),
			};

		} catch (err) {
			throw this.errUtil.createError("IFP --> getFundingDocument() " + err, this.errUtil.METHOD_ERROR);
		}
	},
	/**
     * Looks up up all incremental funding records from a Funding Plan
     * and provide the information contained in each.
     *
     * @params {GlideRecord} - Funding Plan record
     * return {array} - an array of funding increments
     */
	getFundingIncrements: function(fundingPlan) {
		var fundingIncrements = fundingPlan.remaining_amount_increments;

		try {
			if (!fundingIncrements) {
				var pkgInfo = this.errUtil.getRecordLogInfo(this.acquisitionPackage, "number");
				var errorMessage = "No fundingIncrements found for " + pkgInfo.allInfo + ". ";
				errorMessage += "Please provide Funding Plan." ;
				throw this.errUtil.createError(errorMessage, this.errUtil.INVALID_INPUT);
			}

			var fundingIncrementList = getListRecords(
				fundingIncrements,
				["amount", "description", "order"],
				this.FUNDING_INCREMENT_TABLE
			).map(removeSysId);

			return fundingIncrementList;

		} catch (err) {
			throw this.errUtil.createError("IFP --> getFundingIncrements() " + err, this.errUtil.METHOD_ERROR);
		}
	},

	/**
     * Gather all information needed for IFP document generation and 
     * creates a payload. Instantiate the IFP class with an acquistion
     * package recore before using this method.
     * 
     * return {object} - an IFP payload for HOTH API
     */
	getPayload: function() {
		try {
			var acqPackage = this.acquisitionPackage;
			var fundingRequirement = acqPackage.funding_requirement;
			var isIncrementallyFunded = convertToBoolean(fundingRequirement.incrementally_funded.toString());

			if (!isIncrementallyFunded) {
				var pkgInfo = this.errUtil.getRecordLogInfo(acqPackage, "number");
				var message = "Package " + pkgInfo.allInfo + " is not incrementally funded and does not ";
				message += "require an IFP. If an IFP is needed ensure 'YES' is selected for Incrementally ";
				message += "Funded in the Funding Requirement section.";
				throw this.errUtil.createError(message, this.errUtil.INVALID_INPUT);
			}		

			var fundingRequest = fundingRequirement.funding_request;
			var fundingPlan = fundingRequirement.funding_plan;
			var financialPoc = fundingRequirement.financial_poc;
			
			if (!fundingRequest) {
				// Logging a warning because the UI needs to be updated to persist these objects and 
				// we don't want the whole generation process to fail
				gs.warn("No Funding Request found for this Acquisition Package.");
			}
			if (!fundingPlan) {
				throw this.errUtil.createError("No Funding Plan found for this Acquisition Package.", this.errUtil.INVALID_INPUT);
			}
			if (!financialPoc) {
				throw this.errUtil.createError("No Financial POC found for this Acquisition Package.", this.errUtil.INVALID_INPUT);
			}
						
			return {
				documentType: "INCREMENTAL_FUNDING_PLAN",
				templatePayload: {
					requirementsTitle: acqPackage.project_overview.title.toString(),
					missionOwner: this.getFirstMissionOwner().formalName,
					financialPoc: financialPoc.formalName,
					estimatedTaskOrderValue: parseFloat(fundingPlan.estimated_task_order_value.toString()),
					initialAmount: parseFloat(fundingPlan.initial_amount.toString()),
					remainingAmount: parseFloat(fundingPlan.remaining_amount.toString()),
					fundingDocument: fundingRequest ? this.getFundingDocument(fundingRequest) : null,
					fundingIncrements: this.getFundingIncrements(fundingPlan),
					scheduleText: fundingPlan.schedule_text.toString(),
					contractNumber: gs.getProperty("x_g_dis_atat.jwcc.contractNumber"),
					taskOrderNumber: "TBD",
				}
			};


		} catch(err) {
			throw this.errUtil.createError("Error getting IFP payload. " + err, this.errUtil.INVALID_INPUT);
		}
	},

	type: 'Ifp'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>julius.fitzhugh-ctr</sys_created_by>
        <sys_created_on>2022-11-29 14:21:01</sys_created_on>
        <sys_id>5070b8dc976fd1106fa8b4b3f153afdd</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>Ifp</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_5070b8dc976fd1106fa8b4b3f153afdd</sys_update_name>
        <sys_updated_by>1370228783.CTR</sys_updated_by>
        <sys_updated_on>2022-12-28 03:05:36</sys_updated_on>
    </sys_script_include>
</record_update>
