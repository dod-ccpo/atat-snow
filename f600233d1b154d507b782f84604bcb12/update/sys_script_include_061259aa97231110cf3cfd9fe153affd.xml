<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.UserPermissions</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>ATAT class that contains commonly used functions to use to decide if an entity (e.g., user) has permissions to perform CRUD operations on a given resource. </description>
        <name>UserPermissions</name>
        <script><![CDATA[var UserPermissions = Class.create();
UserPermissions.prototype = {
    errUtil: new ErrorHandler(),
    initialize: function() {},
    /**
     * @return {boolean} true if user has the permission; false otherwise
     */
    hasCreatePermission: function() {
        try {
            //TODO
            return false;
        } catch (error) {
            throw this.errUtil.createError(
                "UserPermissions --> hasCreatePermission() " + error,
                this.errUtil.METHOD_ERROR
            );
        }
    },
    /**
     * @return {boolean} true if user has the permission; false otherwise
     */
    hasDeletePermission: function() {
        try {
            //TODO
            return false;
        } catch (error) {
            throw this.errUtil.createError(
                "UserPermissions --> hasDeletePermission() " + error,
                this.errUtil.METHOD_ERROR
            );
        }
    },
    /**
     * @return {boolean} true if user has the permission; false otherwise
     */
    hasReadPermission: function() {
        try {
            //TODO
            return false;
        } catch (error) {
            throw this.errUtil.createError(
                "UserPermissions --> hasReadPermission() " + error,
                this.errUtil.METHOD_ERROR
            );
        }
    },
    /**
     * @return {boolean} true if user has the permission; false otherwise
     */
    hasWritePermission: function() {
        try {
            //TODO
            return false;
        } catch (error) {
            throw this.errUtil.createError(
                "UserPermissions --> hasWritePermission() " + error,
                this.errUtil.METHOD_ERROR
            );
        }
    },
    type: "UserPermissions",
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>jason.burkert-ctr@ccpo.mil</sys_created_by>
        <sys_created_on>2022-12-06 16:51:03</sys_created_on>
        <sys_id>061259aa97231110cf3cfd9fe153affd</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>UserPermissions</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_061259aa97231110cf3cfd9fe153affd</sys_update_name>
        <sys_updated_by>jason.burkert-ctr@ccpo.mil</sys_updated_by>
        <sys_updated_on>2022-12-06 17:40:37</sys_updated_on>
    </sys_script_include>
</record_update>
