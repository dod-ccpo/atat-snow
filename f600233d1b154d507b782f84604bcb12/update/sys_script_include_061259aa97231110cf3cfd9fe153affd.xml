<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.UserPermissions</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>ATAT class that contains commonly used functions to use to decide if an entity (e.g., user) has permissions to perform CRUD operations on a given resource. </description>
        <name>UserPermissions</name>
        <script><![CDATA[// script include
var UserPermissions = Class.create();
UserPermissions.prototype = {
	errUtil: new ErrorHandler(),
	userSysId: null,
	userRoles: null,
	allowedRoles: new Array("x_g_dis_atat.hacc_admin"),
	ACQ_PKG_TABLE: "x_g_dis_atat_acquisition_package",

	initialize: function(userSysId, userRoles) {
		this.userSysId = userSysId ? userSysId : null;
		this.userRoles = userRoles ? userRoles.toString().split(",") : null;
	},

	/**
   * A general class that determines if a user has read permissions based on the
   * ACLs and Roles. The combination of the current user, permissions provided for 
   * specific user types inside of the package (e.g., mission owner, reviewer, etc.),
   * and roles outside of the package (e.g., admin).
   *
   * @param {array} accessList - allowed user sys IDs
   * @return true if user has permission otherwise false
   */
	hasAnyPermission: function(accessList) {
		try {
			var userHasPermission, matchedRoles;
			var allowedRoles = this.allowedRoles;

			// The logic to obtain the access list is inside of the ACL script 
			// because it depends on the which table and how many tables up is 
			// required to get to the the acquisition package. This allows for
			// a more generic method that passes in a package accessList.
			userHasPermission = listContains(this.userSysId, accessList);
			matchedRoles = this.userRoles.filter(function(userRole) {
				return listContains(userRole, allowedRoles);
			});
			gs.info("USER HAS PERM: " + userHasPermission);
			gs.info("USER HAS ROLE:" + matchedRoles.length);

			var userHasRole = matchedRoles.length > 0;
			return userHasPermission || userHasRole;

		} catch (error) {
			this.errUtil.errorLogger(
				this.erroUtil.createError(
					"UserPermissions --> hasReadPermission()" + error,
					this.errUtil.METHOD_ERROR
				)
			);
		}
	},

	type: "UserPermissions",
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>jason.burkert-ctr@ccpo.mil</sys_created_by>
        <sys_created_on>2022-12-06 16:51:03</sys_created_on>
        <sys_id>061259aa97231110cf3cfd9fe153affd</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>UserPermissions</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_061259aa97231110cf3cfd9fe153affd</sys_update_name>
        <sys_updated_by>1370228783.CTR</sys_updated_by>
        <sys_updated_on>2022-12-14 15:58:54</sys_updated_on>
    </sys_script_include>
</record_update>
