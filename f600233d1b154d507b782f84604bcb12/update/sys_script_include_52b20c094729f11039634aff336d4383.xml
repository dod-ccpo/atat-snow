<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.GetPortfolioDetails</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GetPortfolioDetails</name>
        <script><![CDATA[var GetPortfolioDetails = Class.create();
GetPortfolioDetails.prototype = {
    errUtil: new ErrorHandler(),
    portfolioId: null,
    userId: null,
    portfolio: new GlideRecord('x_g_dis_atat_portfolio'),
    taskOrder: new GlideRecord('x_g_dis_atat_task_order'),
    clinsGR: new GlideRecord('x_g_dis_atat_clin'),
    CLINS_TABLE: 'x_g_dis_atat_clin',
    ENVIRONMENT_TABLE: 'x_g_dis_atat_environment',
    COST_TABLE: 'x_g_dis_atat_costs',
   
    ctb: this.convertToBoolean,

    initialize: function(portfolioId,userId){
        this.portfolioId = portfolioId;
        this.userId = userId;
       
    },
    /** 
     * Gets environment details for a single environment given a sys_id
     * @param {id} representing an environments sys_id
     * @return {classification_level,environment_status,provisioning_request_date,provisioned_date,dashboard_link} a json object representing the given environments data in the table 
     */  
    getEnvrionmentDetails: function(id) {
        //let environments = []
        var environment = new GlideRecord(this.ENVIRONMENT_TABLE);
        environment.get(id)
        return {
            classification_level: environment.classification_level,
            environment_status: environment.environment_status,
            provisioning_request_date: environment.provisioning_request_date,
            provisioned_date: environment.provisioned_date,
            dashboard_link: environment.dashboard_link
        }
    },
    /**
     * Gets list of environments and its details for a given portfolio
     * @param {id} representing a portfolio sys_id
     * @return {[{classification_level,environment_status,provisioning_request_date,provisioned_date,dashboard_link}]} an array of json objects for all environments
     */
    getEnvironments: function(id) {
        var environments = new GlideRecord(this.ENVIRONMENT_TABLE);
        environments.addQuery('portfolio',id)
        environments.query()
        var data = []
        while(environments.next()){
            data.push(this.getEnvrionmentDetails(environments.sys_id))
        }
        return data
    },
    //TODO leverage getCostData() if at all possible
    /**
     * Gets costs for a given CLIN given the sys_id
     * @param {id}
     * @return {[{is_actual,value,year_month}]}
     */
    getCosts: function(id) {
        
        return '' //data array json objects
    },
    /**
     * Parses CLIN details for a single clin given a CLIN record
     * @param {id} representing a CLIN sys_id
     * @return {clin_number,idiq_clin,active,clin_status,classification_level,funds_obligated,funds_total,pop_start_date,pop_end_date,type,costs}
     */
    getClinDetails: function(id) {
        //TODO get costs associated with each CLIN
        var clin = new GlideRecord(this.CLINS_TABLE);
        clin.get(id);
        return {
            clin_number: clin.clin_number,
            idiq_clin: clin.idiq_clin,
            active: Boolean(clin.active),
            actual_funds_spent: clin.actual_funds_spent,
            clin_status: clin.clin_status,
            classification_level: clin.classification_level,
            funds_obligated: clin.funds_obligated,
            funds_total: clin.funds_total,
            pop_start_date: clin.pop_start_date,
            pop_end_date: clin.pop_end_date,
            type: clin.type,
            costs: this.getCosts(clin.sys_id)
        };
    },
    /**
     * Gets CLINs for a given task order
     * @return data array of all CLINs for a task order
     */
    getClins: function() {
        var data = [];
        var clins = new GlideRecord(this.CLINS_TABLE)
        clins.addQuery('task_order',this.taskOrder.sys_id)
        clins.query();
        while(clins.next()){
            var tmp = this.getClinDetails(clins.sys_id);
            data.push(tmp);
        }
        return data;
    },
    /**
     * Gets info for a single user record in the sys_user table
     * @param {id} representing a user sys_id 
     * @returns 
     */
    getUserInfo: function(id) {
        var user = new GlideRecord('sys_user')
        user.get(id)
        return { 
            name: user.name,
            first_name: user.first_name,
            last_name: user.last_name,
            user_name: '', //what is this?
            email: user.email,
            company: user.company.name, //ref
            mobile_phone: user.mobile_phone,
            phone: user.commercial_phone,
            home_phone: user.home_phone,
            title: user.title
        }
    },
    getUserList: function(userString){
        if(userString == ''){
            return ''
        }
        var data = [];
        if(userString.indexOf(',') === -1){
            data.push(this.getUserInfo(userString.toString().trim()))
        } else {
            var usersList = userString.split(',')
            for(var i=0; i<usersList.length; i++){
                var userId = usersList[i].trim();
                data.push(this.getUserInfo(userId))
            }
        }
        return data;
    },
    /**
     * Gather ALL Cost data for a given Portfolio where task_order_number = portfolio.active_task_order
     * @param {toId} task_order_id used to filter costs table data
     * @return {[{agency,clin,csp,is_actual,organization,portfolio,task_order_number,value,year_month}]} for all cost records of the given task order
     */
    getCostData: function(toId){
		var gr = new GlideRecord(this.COST_TABLE);
		var fundsObligated = 0.00;
		var fundsSpent = 0.00;
        var data = []
        

		gr.addQuery('task_order_number',toId)//.addCondition("clin_status", "!=", "OPTION_PENDING")/*.addCondition("clin_status","!=","EXPIRED")*/;
		gr.query();
		
        while(gr.next()){
            var date = new GlideDateTime(gr.year_month)
            var tmp = {
                agency: gr.agency.getDisplayValue().toString(),
                clin: gr.clin.getDisplayValue().toString(),
                csp: gr.csp.getDisplayValue().toString(),
                is_actual: Boolean(gr.is_actual),
                organization: gr.organization.getDisplayValue().toString(),
                portfolio: gr.portfolio.getDisplayValue().toString(),
                taskOrderNumber: gr.task_order_number.getDisplayValue().toString(),
                value: gr.value != 0 ? parseFloat(gr.value):0,
                yearMonth: gr.year_month.getDisplayValue().toString(),
                year: date.getYearLocalTime(),
                month: date.getMonthLocalTime(),
                day: date.getDayOfMonthLocalTime(), 
            }
            gs.info("DTO: " + JSON.stringify(tmp))
            data.push(tmp)
		}
		return data
	},
    getDetails: function(){
        this.portfolio.get(this.portfolioId);
        this.taskOrder.get(this.portfolio.active_task_order);
        var clins = this.getClins();
        var costData = this.getCostData(this.taskOrder.task_order_number)

        return {
            portfolio_name: this.portfolio.name,
            portfolio_status: this.portfolio.portfolio_status.toString(),
            agency: this.portfolio.agency.title.toString(),
            last_modified: this.portfolio.last_updated.toString(),
            current_user_is_owner: this.portfolio.portfolio_owner.toString() === this.userId ? true : false,
            current_user_is_manager: JSON.stringify(this.portfolio.portfolio_managers.toString()).includes(this.userId) ? true: false,
            vendor: this.portfolio.vendor.toString(),
            pop_start_date: this.taskOrder.pop_start_date,
            pop_end_date: this.taskOrder.pop_end_date,
            //TODO refactor
            total_obligated: '',//clinData.fundsObligated,
            funds_spent: '',//clinData.fundsSpent, 

            description: this.portfolio.description.toString(),
            is_archived: Boolean(this.portfolio.is_archived),
            last_updated: this.portfolio.last_updated,
            last_cost_data_sync: this.portfolio.last_cost_data_sync,
            funding_status: this.portfolio.portfolio_funding_status,

            portfolio_users: {
                creator: this.portfolio.sys_created_by,
                owner: this.getUserInfo(this.portfolio.portfolio_owner),
                managers: this.getUserList(this.portfolio.portfolio_managers),
                viewers: this.getUserList(this.portfolio.portfolio_viewers),
            },
            //begin calculations on CLINS
            available_funds: 0,//this.calculateAvailableFunds(costData),
            total_portfolio_funds: 0,
            period_funds_spent: 0,
            spend_monthly_average: 0,
            spend_last_month: 0,
            pend_end_of_month_forecast: 0,
            spend_period_to_date: 0,
            spend_end_of_period_forecast: 0,
            estimated_funds_to_be_invoiced: 0,
            estimated_funds_available: 0,
            //end calculations on CLINS
            //begin task order
            task_order: {
                task_order_status: this.taskOrder.task_order_status,
                total_task_order_value: 0, //TODO calculated
                total_lifecycle_amount: this.taskOrder.funds_total,
                total_funds_spent: 0 //TODO calculated
            },
            environments: this.getEnvironments(this.portfolioId),
            clins: clins,
            clinData: costData //internal use, prefer GlideAggregate over heavy calculations
        };
    },
    type: 'GetPortfolioDetails'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.arnold</sys_created_by>
        <sys_created_on>2023-09-26 00:36:32</sys_created_on>
        <sys_id>52b20c094729f11039634aff336d4383</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GetPortfolioDetails</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy/>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_52b20c094729f11039634aff336d4383</sys_update_name>
        <sys_updated_by>tom.arnold</sys_updated_by>
        <sys_updated_on>2023-09-26 00:36:32</sys_updated_on>
    </sys_script_include>
</record_update>
