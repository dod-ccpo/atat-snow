<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.GetPortfolioDetails</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GetPortfolioDetails</name>
        <script><![CDATA[var GetPortfolioDetails = Class.create();
GetPortfolioDetails.prototype = {
    errUtil: new ErrorHandler(),
    portfolioId: null,
    userId: null,

    AVG_DAYS_IN_MONTH: 30.437,
    CLINS_TABLE: 'x_g_dis_atat_clin',
    ENVIRONMENT_TABLE: 'x_g_dis_atat_environment',
    COST_TABLE: 'x_g_dis_atat_costs',

    portfolio: new GlideRecord('x_g_dis_atat_portfolio'),
    taskOrder: new GlideRecord('x_g_dis_atat_task_order'),
    clinsGR: new GlideRecord('x_g_dis_atat_clin'),

    inPeriodClins: [],

    availableFunds: 0,
    totalPortfolioFunds: 0,
    periodFundsSpent: 0,
    spendLastMonth: 0,
    spendMonthlyAverage: 0,
    xaasClinNumbers: ['01', '03', '05', '17', '19', '21'],    
    spendXaaSTotalSpent: 0,
    spendEndOfMonthXaasForecast: 0,
    monthsIntoPeriod: 0,

    totalLifecycleAmount: 0,
    totalTaskOrderValue: 0,
    totalFundsSpent: 0,
    totalObligatedFunds: 0,

    initialize: function(portfolioId, userId) {
        this.portfolioId = portfolioId;
        this.userId = userId;
    },

    getInPeriodClins: function() {
        const now = new GlideDate();
        const clins = new global.GlideQuery(this.CLINS_TABLE)
            .where('task_order', this.taskOrder.sys_id)
            .where('pop_start_date', '<=', now.getValue())
            .where('pop_end_date', '>', now.getValue())
            .select('sys_id')
            .reduce(function(clin, i) {
                clin.push(i.sys_id);
                return clin;
            }, []);
        return clins;
    },

    // Total obligated funds of all in-period CLINs:
    getTotalPortfolioFunds: function() {
        const clinsInPeriod = this.inPeriodClins;

        const total_portfolio_funds = new global.GlideQuery(this.CLINS_TABLE)
            .where('task_order', this.taskOrder.sys_id)
            .where('sys_id', 'IN', clinsInPeriod)
            .sum('funds_obligated')
            .orElse(0.0);

        return total_portfolio_funds;
    },

    // Sum of all is_actual costs in current PoP
    getPeriodFundsSpent: function() {
        const clinsInPeriod = this.inPeriodClins;
        const period_funds_spent = new global.GlideQuery(this.COST_TABLE)
            .where('portfolio', this.portfolioId)
            .where('clin', 'IN', clinsInPeriod)
            .where('is_actual', true)
            .sum('value')
            .orElse(0.0);

        return period_funds_spent;
    },

    getMonthlyXaaSSpend: function() {

    },

    getSpendMonthlyAverage: function() {
        const currentMonth = new GlideDateTime().getMonthLocalTime();
        const costs = []; 

        const gq = new global.GlideQuery(this.COST_TABLE)
            .where('portfolio', this.portfolioId)
            .where('is_actual', true)
            .where('clin', 'IN', this.inPeriodClins)		
            .groupBy('year_month')
            .aggregate('sum', 'value')
            .select()
            .toArray(100)
            .forEach((e, i) => {
                const year_month = e.group.year_month;
                const sum = e.sum.value;
                const costGdt = new GlideDateTime(year_month + " 12:00:00");
                const costMonth = costGdt.getMonthLocalTime();
                if (currentMonth !== costMonth) { 
                    costs.push(sum);
                }
            });
		
		if(costs.length === 0) {
			return 0;
		}
        this.monthsIntoPeriod = costs.length;
        const sum = costs.reduce((acc, currentValue) => {
            return acc + currentValue;
        }, 0);

		return sum / this.monthsIntoPeriod;
    },

    // sum of all is_actual costs for all CLINs from previous month.
    getSpendLastMonth: function() {
        const currentMonthGdt = new GlideDateTime();
        currentMonthGdt.setDayOfMonthLocalTime(1);
        const previousMonthGdt = new GlideDateTime();
        previousMonthGdt.addMonthsLocalTime(-1);
        previousMonthGdt.setDayOfMonthLocalTime(1);

        const currentMonthDate = currentMonthGdt.getLocalDate();
        const previousMonthDate = previousMonthGdt.getLocalDate();
        const spendLastMonth = new global.GlideQuery(this.COST_TABLE)
            .where('portfolio', this.portfolioId)
            .where('is_actual', true)
            .where('year_month', '>=', previousMonthDate)
            .where('year_month', '<', currentMonthDate)
            .sum('value')
            .orElse(0.0);

        return spendLastMonth;
    },

    getSpendLastMonthTrend: function() {
		if(this.spendMonthlyAverage > 0) {
			return ((this.spendLastMonth - this.spendMonthlyAverage) / this.spendMonthlyAverage) * 100;
		}
        return 0.0;
    },

    getSpendEndOfMonthXaasForecastTrend: function() {
		if(this.monthsIntoPeriod === 0) {
			return 0.0;
		}
		
        const monthlyXaaSAverageSpend = this.spendXaaSTotalSpent / this.monthsIntoPeriod;
		if(monthlyXaaSAverageSpend === 0) {
			return 0.0;
		}
		
        return ((this.spendEndOfMonthXaasForecast - monthlyXaaSAverageSpend) / monthlyXaaSAverageSpend) * 100;
    },

    // sum all actual costs + (spend_monthly_average * months_remaining (prorated))
    getSpendEndOfPeriodForecast: function() {
        const taskOrderPopEnd = new GlideDateTime(this.taskOrder.pop_end_date + " 12:00:00");
        const now = new GlideDateTime();
        const dur = GlideDateTime.subtract(now, taskOrderPopEnd);
        const monthsRemaining = dur.getRoundedDayPart() / this.AVG_DAYS_IN_MONTH;

        return this.totalFundsSpent + (this.spendMonthlyAverage * monthsRemaining);
    },

    getEstimatedFundsAvailable: function() {
        return this.totalPortfolioFunds - this.periodFundsSpent - this.spendEndOfMonthXaasForecast;
    },

    // sum of all funds_total values for all CLINs in all periods, past, present and future
    getTotalLifecycleAmount: function() {
        const total_lifecycle_amount = parseFloat(new global.GlideQuery(this.CLINS_TABLE)
            .where('task_order', this.taskOrder.sys_id)
            .sum('funds_total')
            .orElse(0.0));

        return total_lifecycle_amount;
    },

    // sum of all funds_total values for all CLINs (excercised) in all periods, past, present and future
    getTotalTaskOrderValue: function() {
        const total_task_order_value = parseFloat(new global.GlideQuery(this.CLINS_TABLE)
            .where('task_order', this.taskOrder.sys_id)
            .where('funds_obligated', '>', 0.0)
            .sum('funds_total')
            .orElse(0.0));

        return total_task_order_value;
    },

    // sum of all current and past clins actual_funds_spent
    getTotalFundsSpent: function() {
        const total_funds_spent = new global.GlideQuery(this.COST_TABLE)
            .where('portfolio', this.portfolioId)
            .where('is_actual', true)
            .sum('value')
            .orElse(0.0);

        return total_funds_spent;
    },

    getTotalObligatedFunds: function() {
        const total_obligated_funds = new global.GlideQuery(this.CLINS_TABLE)
            .where('task_order', this.taskOrder.sys_id)
            .sum('funds_obligated')
            .orElse(0.0);

        return total_obligated_funds;
    },

    getEnvironments: function() {
        const gr = new GlideRecord(this.ENVIRONMENT_TABLE);
        gr.addQuery('portfolio', this.portfolioId);
        gr.query();
        let environments = [];
        while (gr.next()) {
            environments.push({
                classification_level: gr.getValue('classification_level'),
				cloud_distinguisher: gr.csp.cloud_distinguisher,
				csp_display: gr.getDisplayValue('csp').toString(),
				dashboard_link: gr.getValue('dashboard_link'),
                environment_status: gr.getValue('environment_status'),
				provisioned_date: gr.getValue('provisioned_date'),
                provisioning_request_date: gr.getValue('provisioning_request_date'),
				sys_created_on: gr.getValue('sys_created_on'),
				sys_id: gr.getValue('sys_id')
            });
        }
        return environments;
    },

    getClinDetails: function(id) {
        const clin = new GlideRecord(this.CLINS_TABLE);
        clin.get(id);
        const costs = new global.GlideQuery(this.COST_TABLE)
            .where('clin', id)
            .select('is_actual', 'value', 'year_month', 'clin$DISPLAY', 'clin')
            .toArray(100);
        
		costs.forEach((cost) => {
            const last2ClinChars = cost.clin$DISPLAY.slice(-2);
            if (this.inPeriodClins.includes(cost.clin) && this.xaasClinNumbers.includes(last2ClinChars)) {
                if (cost.is_actual === true) {
                    this.spendXaaSTotalSpent += parseFloat(cost.value);
                } else {
                    this.spendEndOfMonthXaasForecast += parseFloat(cost.value);
                }
            }
        });
        return {
            clin_number: clin.clin_number,
            idiq_clin: clin.idiq_clin.getDisplayValue(),
            active: Boolean(clin.active),
            actual_funds_spent: clin.actual_funds_spent,
            clin_status: clin.clin_status,
            classification_level: clin.classification_level,
            funds_obligated: clin.funds_obligated,
            funds_total: clin.funds_total,
            pop_start_date: clin.pop_start_date,
            pop_end_date: clin.pop_end_date,
            type: clin.type,
			sys_id: clin.sys_id,
            costs: costs.map((cost) => {
				cost.clin_number = cost.clin$DISPLAY;
				delete cost.clin$DISPLAY;
				return cost;
			})
        };
    },

	// not optimized; optimization pass in future sprint after more discussion
    getPortfolioUsers: function() {
        const creator = new global.GlideQuery('sys_user')
            .where('user_name', this.portfolio.sys_created_by)
            .selectOne('name', 'first_name', 'last_name', 'user_name', 'email', 'company', 'mobile_phone', 'phone', 'home_phone', 'title')
            .get();

        const owner = new global.GlideQuery('sys_user')
            .where('sys_id', this.portfolio.portfolio_owner)
            .selectOne('name', 'first_name', 'last_name', 'user_name', 'email', 'company', 'mobile_phone', 'phone', 'home_phone', 'title')
            .get();

        let managers = [];
        if (this.portfolio.portfolio_managers) {
            managers = new global.GlideQuery('sys_user')
                .where('sys_id', 'IN', this.portfolio.portfolio_managers.split(','))
                .select('name', 'first_name', 'last_name', 'user_name', 'email', 'company', 'mobile_phone', 'phone', 'home_phone', 'title')
                .toArray(100);
        }

        let viewers = [];
        if (this.portfolio.portfolio_viewers) {
            viewers = new global.GlideQuery('sys_user')
                .where('sys_id', 'IN', this.portfolio.portfolio_viewers.split(','))
                .select('name', 'first_name', 'last_name', 'user_name', 'email', 'company', 'mobile_phone', 'phone', 'home_phone', 'title')
                .toArray(100);
        }

        return {
            creator,
            owner,
            managers,
            viewers
        };
    },

    /**
     * Gets CLINs for a given task order
     * @return data array of all CLINs for a task order
     */
    getClins: function() {
        const data = [];
        const clins = new GlideRecord(this.CLINS_TABLE);
        clins.addQuery('task_order', this.taskOrder.sys_id);
        clins.query();
        while (clins.next()) {
            const tmp = this.getClinDetails(clins.sys_id);
            data.push(tmp);
        }
        return data;
    },

    getDetails: function() {
        this.portfolio.get(this.portfolioId);
        this.taskOrder.get(this.portfolio.active_task_order);
        this.inPeriodClins = this.getInPeriodClins();
        this.totalPortfolioFunds = this.getTotalPortfolioFunds();
        this.periodFundsSpent = this.getPeriodFundsSpent();
        this.availableFunds = this.totalPortfolioFunds - this.periodFundsSpent;	
        this.spendLastMonth = this.getSpendLastMonth();
        this.spendMonthlyAverage = this.getSpendMonthlyAverage();
        this.totalLifecycleAmount = this.getTotalLifecycleAmount();
        this.totalTaskOrderValue = this.getTotalTaskOrderValue();
        this.totalFundsSpent = this.getTotalFundsSpent();
        this.totalObligatedFunds = this.getTotalObligatedFunds();

        const clins = this.getClins();

        return {
            portfolio_name: this.portfolio.name,
            portfolio_status: this.portfolio.portfolio_status.toString(),
            agency: this.portfolio.agency.title.toString(),
			agencyDisplay: this.portfolio.agency.acronym.toString(),
            last_modified: this.portfolio.last_updated.toString(),
            current_user_is_owner: this.portfolio.portfolio_owner.toString() === this.userId ? true : false,
            current_user_is_manager: JSON.stringify(this.portfolio.portfolio_managers.toString()).includes(this.userId) ? true : false,
            vendor: this.portfolio.vendor.toString(),
            pop_start_date: this.taskOrder.pop_start_date,
            pop_end_date: this.taskOrder.pop_end_date,
            description: this.portfolio.description.toString(),
            is_archived: Boolean(this.portfolio.is_archived),
            last_updated: this.portfolio.last_updated,
            last_cost_data_sync: this.portfolio.last_cost_data_sync,
            funding_status: this.portfolio.portfolio_funding_status,
            environments: this.getEnvironments(),
            portfolio_users: this.getPortfolioUsers(),
            available_funds: this.availableFunds.toFixed(2),
            total_portfolio_funds: this.totalPortfolioFunds.toFixed(2),
            period_funds_spent: this.periodFundsSpent.toFixed(2),
            spend_monthly_average: this.spendMonthlyAverage.toFixed(2),
            spend_last_month: this.spendLastMonth.toFixed(2),
            spend_last_month_trend: this.getSpendLastMonthTrend().toFixed(2),
            spend_end_of_month_xaas_forecast: this.spendEndOfMonthXaasForecast.toFixed(2),
            spend_end_of_month_xaas_forecast_trend: this.getSpendEndOfMonthXaasForecastTrend().toFixed(2),
            spend_end_of_period_forecast: this.getSpendEndOfPeriodForecast().toFixed(2), // intentional duplicate
            estimated_funds_available: this.getEstimatedFundsAvailable().toFixed(2),
            estimated_funds_to_be_invoiced: this.spendEndOfMonthXaasForecast.toFixed(2), // intentional duplicate
			inPeriodClins: this.inPeriodClins,
            task_order: {
                total_task_order_value: this.totalTaskOrderValue.toFixed(2),
                total_lifecycle_amount: this.totalLifecycleAmount.toFixed(2),
                total_funds_spent: this.totalFundsSpent.toFixed(2),
                total_obligated_funds: this.totalObligatedFunds.toFixed(2),
				task_order_number: this.taskOrder.task_order_number,
				task_order_status: this.taskOrder.task_order_status,
				sys_id: this.taskOrder.sys_id
            },
            clins,
        };
    },
    type: 'GetPortfolioDetails'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.arnold</sys_created_by>
        <sys_created_on>2023-09-26 00:36:32</sys_created_on>
        <sys_id>52b20c094729f11039634aff336d4383</sys_id>
        <sys_mod_count>453</sys_mod_count>
        <sys_name>GetPortfolioDetails</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy/>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_52b20c094729f11039634aff336d4383</sys_update_name>
        <sys_updated_by>stephen.hayes</sys_updated_by>
        <sys_updated_on>2023-10-12 19:23:43</sys_updated_on>
    </sys_script_include>
</record_update>
