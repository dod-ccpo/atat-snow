<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.ErrorHandler</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>ATAT class to help with error handling. This approach is geared towards having a central location for dealing with errors in script includes.</description>
        <name>ErrorHandler</name>
        <script><![CDATA[var ErrorHandler = Class.create();
ErrorHandler.prototype = {
    initialize: function() {
		this.REQUEST_ERROR = "RequestError";
		this.INVALID_INPUT = "InvalidInput";
		this.RECORD_NOT_FOUND = "RecordNotFound";
    },
	// Creates a generic "Error" or named Error object
	// @para {string} - error message to provide
	// @para {string} optional - user defined error name
	createError: function (message, errorName) {
		var error = new Error(message);
		if (errorName) {
			error.name = errorName;
		}
		return error;
	},
	// Construct a string of relevent record information to provide in 
	// logs, this is mainly the sysId and a more user friendly identifier 
	// @param {GlideRecord object} - record to get information
	// @param {string} optional - column best for identifying the record 
	getRecordLogInfo: function (record, identifierField) {
		if (!record || typeof record !== "object") {
			throw this.createError("Invalid input, please provide a valid GlideRecord.", this.INVALID_INPUT);
		}
		
		var recordInfo = {};
		recordInfo.sysId = "(SysId: " + record.sys_id + ")";
		if (!identifierField) {
			return recordInfo;
		}

		recordInfo.identifier = record[identifierField];
		recordInfo.allInfo = recordInfo.identifier + " " + recordInfo.sysId;
		return recordInfo;
	},
	// Log errors in System Log to be viewed. Generally used in the catch of
	// a try/catch to allow errors to bubble up to the main func and are logged.
	// @param {Error object} - error object created using new Error()
	errorLogger: function (error) {
		switch (error.name) {
			case this.REQUEST_ERROR:
				gs.error(error.message);
				break;
			case this.INVALID_INPUT:
				gs.error(error.message);
				break;
			case this.RECORD_NOT_FOUND:
				gs.error(error);
				break;
			default:
				gs.error("Uncaught Internal SNOW error => " + error + " Error Stack => " + error.stack);
		}
	},

    type: 'ErrorHandler'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>julius.fitzhugh-ctr</sys_created_by>
        <sys_created_on>2022-09-22 01:15:51</sys_created_on>
        <sys_id>97c87b02974611106fa8b4b3f153afef</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>ErrorHandler</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_97c87b02974611106fa8b4b3f153afef</sys_update_name>
        <sys_updated_by>julius.fitzhugh-ctr</sys_updated_by>
        <sys_updated_on>2022-09-23 02:52:25</sys_updated_on>
    </sys_script_include>
</record_update>
