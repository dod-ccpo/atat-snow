<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_g_dis_atat.AlertProcessor</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>AlertProcessor</name>
        <script><![CDATA[class AlertProcessor {

    constructor() {
        this.ALERT_TYPE_FUNDS = "funds";
        this.ALERT_TYPE_TIME = "time";

        this.PREFERENCES_TABLE = "x_g_dis_atat_preferences";
        this.USER_TABLE = "sys_user";
        this.TRACKING_TABLE = "x_g_dis_atat_alerts_tracking";

        this.QUEUE_FUNDS = "x_g_dis_atat.alert_funds";
        this.QUEUE_TIME = "x_g_dis_atat.alert_time";
    }

    process() {
        const processed = this.getTrackingData();
        const timeAlerts = [];
        Object.keys(processed).forEach((clin) => {
            Object.keys(processed[clin]).forEach(group => {
                this.updateTrackingRecords(processed[clin][group], timeAlerts);
            });
        });

        return {
            timeAlerts
        };
    }

    getTrackingData() {
        return new global.GlideQuery(this.TRACKING_TABLE)
            .where('status', 'new')
            .orderBy('clin')
            .orderBy('alert.group')
            .orderBy('alert.priority')
            .select('alert.group',
                'alert.sys_id',
                'alert.type',
                'portfolio',
                'clin',
                'sys_id')
            .toArray(100)
            .reduce((r, a) => {
                r[a.clin] = r[a.clin] || {};
                r[a.clin][a.alert.group] = r[a.clin][a.alert.group] || [];
                r[a.clin][a.alert.group].push(a);
                return r;
            }, {});
    }

    updateTrackingRecords(records, timeAlerts) {
        const gr = new GlideRecord(this.TRACKING_TABLE);
        if (gr.get(records[0].sys_id)) {
            if (records[0].alert.type === this.ALERT_TYPE_FUNDS) {
                this.handleAlert(gr, records[0], this.QUEUE_FUNDS);
            } else if (records[0].alert.type === this.ALERT_TYPE_TIME 
                       && !timeAlerts.includes(records[0].portfolio)) {
                timeAlerts.push(records[0].portfolio);
                this.handleAlert(gr, records[0], this.QUEUE_TIME);
            }
            gr.status = 'processed';
            gr.update();
        }

        records.slice(1).forEach(record => {
            if (gr.get(record.sys_id)) {
                gr.status = 'omitted';
                gr.update();
            }
        });
    }

    updateTrackingRecordsOld(records, timeAlerts, fundAlerts) {
        const gr = new GlideRecord(this.TRACKING_TABLE);

        if (gr.get(records[0])) {
            if (record.alert.type === this.ALERT_TYPE_FUNDS) {
                fundAlerts.push(record.sys_id);
                this.handleAlert(gr, record, this.QUEUE_FUNDS);
                // only one time alert per portfolio
            } else if (record.alert.type === this.ALERT_TYPE_TIME && !timeAlerts.includes(record.portfolio)) {
                timeAlerts.push(record.portfolio);
                this.handleAlert(gr, record, this.QUEUE_TIME);
            }

            gr.status = 'processed';
            gr.update();
        }

        records.slice(1).forEach(record => {
            if (gr.get(record.sys_id)) {
                gr.status = 'omitted';
                gr.update();
            }
        });
    }

    handleAlert(gr, alert, queue) {
        const userSysIds = this.extractUserSysIds(gr);
        new global.GlideQuery(this.USER_TABLE)
            .where('sys_id', 'IN', userSysIds)
            .select('email')
            .toArray(100)
            .forEach((user) => {
                gs.eventQueue(queue,
                    gr,
                    user.email,
                    gr.portfolio.active_task_order.getDisplayValue());
            });
    }

    extractUserSysIds(gr) {
        let emails = [];

        if (gr.portfolio.portfolio_owner) {
            emails.push(gr.portfolio.portfolio_owner.toString());
        }

        if (gr.portfolio.portfolio_managers) {
            emails = emails.concat(gr.portfolio.portfolio_managers.toString().split(','));
        }
        if (gr.portfolio.portfolio_viewers) {
            emails = emails.concat(gr.portfolio.portfolio_viewers.toString().split(','));
        }
        return emails;
    }
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>stephen.hayes</sys_created_by>
        <sys_created_on>2023-10-18 11:47:30</sys_created_on>
        <sys_id>71eea70447427110ee827d7ba26d43e5</sys_id>
        <sys_mod_count>132</sys_mod_count>
        <sys_name>AlertProcessor</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_71eea70447427110ee827d7ba26d43e5</sys_update_name>
        <sys_updated_by>stephen.hayes</sys_updated_by>
        <sys_updated_on>2023-10-27 18:34:06</sys_updated_on>
    </sys_script_include>
</record_update>
