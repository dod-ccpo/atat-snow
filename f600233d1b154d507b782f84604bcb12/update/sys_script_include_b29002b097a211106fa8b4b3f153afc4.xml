<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.Igce</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Igce</name>
        <script><![CDATA[var Igce = Class.create();
Igce.prototype = {
    IGCE_ESTIMATE_TABLE: "x_g_dis_atat_igce_estimate",
    IGCE_ESTIMATE_FIELDS: ["acquisition_package", "classification_instance", "classification_level", "contract_type", "cross_domain_solution",
        "dow_task_number", "environment_instance", "idiq_clin_type", "title", "unit", "unit_price", "unit_quantity"],
    ENV_INST_TABLE: "x_g_dis_atat_environment_instance",
    CLASS_INST_TABLE: "x_g_dis_atat_classification_instance",
    CROSS_DOMAIN_SOLN_TABLE: "x_g_dis_atat_cross_domain_solution",
    SELECTED_PERIOD_FIELDS: ["need_for_entire_task_order_duration", "selected_periods"],
    CLASSIFICATION_LEVEL_TABLE: "x_g_dis_atat_classification_level",
    TRAVEL_REQ_TABLE: "x_g_dis_atat_travel_requirement",
    TRAVEL_REQ_FIELDS: ["selected_periods", "duration_in_days", "number_of_travelers", "trip_location", "number_of_trips"],
    acquisitionPackage: null,

    initialize: function (acquisitionPackage) {
        this.acquisitionPackage = acquisitionPackage;
    },
    getPackagePeriods: function (base, options) {
        // This returns the periods in the IGCE schema for the Periods Estimate Object
        var mappedPeriods = [];
        if (base) {
            mappedPeriods.push({
                "period": {
                    "periodType": base.period_type.toString(),
                    "periodUnitCount": base.period_unit_count.toString(),
                    "periodUnit": base.period_unit.toString(),
                    "optionOrder": base.option_order.toString()
                },
                "periodLineItems": [],
            });
        }
        if (options) {
            getListRecords(options,
                ["period_type", "period_unit_count", "period_unit", "option_order"],
                "x_g_dis_atat_period")
                .forEach(function (period) {
                    mappedPeriods.push({
                        "period": {
                            "periodType": period.period_type.toString(),
                            "periodUnitCount": period.period_unit_count.toString(),
                            "periodUnit": period.period_unit.toString(),
                            "optionOrder": period.option_order.toString()
                        }, "periodLineItems": []
                    });
                });
        }
        return mappedPeriods;
    },

    getInstancePeriodInfo: function (instance) {
        //This function retrieves:
        // selected_periods
        // need_for_entire_task_order_duration
        // Appending it to the given Instance

        var selectedPeriodsFields = ["period_type", "option_order", "period_unit", "period_unit_count"];

        var entireDuration = convertToBoolean(instance.need_for_entire_task_order_duration.toString());
        instance.need_for_entire_task_order_duration = entireDuration;

        if (entireDuration) {
            instance.selected_periods = [];
        } else {
            var selectedPeriods = [];
            var retrieved_periods = getListRecords(instance.selected_periods.toString(), selectedPeriodsFields, "x_g_dis_atat_period").map(removeSysId);
            for (var i = 0; i < retrieved_periods.length; i++) {
                var formatted_option_order;
                if (retrieved_periods[i].option_order == null) {
                    formatted_option_order = "";
                }
                else {
                    formatted_option_order = retrieved_periods[i].option_order.toString();
                }
                selectedPeriods.push({
                    "periodType": retrieved_periods[i].period_type.toString(),
                    "periodUnitCount": retrieved_periods[i].period_unit_count.toString(),
                    "periodUnit": retrieved_periods[i].period_unit.toString(),
                    "optionOrder": formatted_option_order
                });
            };
            instance.selected_periods = selectedPeriods;
        }
        return instance;
    },

    mapIgceToPeriodsEstimate: function (data_to_map, periods_estimate) {
        // For each item in IGCE estimates
        data_to_map.forEach(function (item) {
            // If the Environment Instance is NOT needed for the entire TO duration
            // Map it to the periods specified in period_line_items
            if (!item.instance_info.need_for_entire_task_order_duration) {

                // For each period in the selected_periods array the instance
                item.instance_info.selected_periods.forEach(function (period) {

                    // Map period_type and base_period of the periods_estimate array
                    var formattedPeriodOutput = periods_estimate.map(function (input) {
                        return input.period.periodType + input.period.optionOrder;
                    });

                    var indexOfCurrentPeriod = formattedPeriodOutput.indexOf(period.periodType + period.optionOrder);

                    // Insert into periods_estimate, under the specified period and period_line_items 
                    periods_estimate[indexOfCurrentPeriod].periodLineItems.push({
                        "idiqClin": Igce.prototype.determineIdiqClin(item.classification_level, item.idiq_clin_type),
                        "contract": item.contract_type,
                        "dowTaskNumber": item.dow_task_number,
                        "title": item.title,
                        "description": item.description,
                        "unitPrice": item.unit_price,
                        "unitQuantity": item.unit_quantity,
                        "unit": item.unit.toLowerCase(), //TODO -> what does the JSON string look like, there are no examples in sandbox
                    });
                });
            }
            // Else if the Environment Instance is needed for the entire TO duration
            // Map it to each period in the periods_estimate array
            else if (item.instance_info.need_for_entire_task_order_duration) {
                periods_estimate.forEach(function (period) {
                    period.periodLineItems.push({
                        "idiqClin": Igce.prototype.determineIdiqClin(item.classification_level, item.idiq_clin_type),
                        "contract": item.contract_type,
                        "dowTaskNumber": item.dow_task_number,
                        "title": item.title,
                        "description": item.description,
                        "unitPrice": item.unit_price,
                        "unit": item.unit.toLowerCase(), //TODO -> what does the JSON string look like? there are no examples in sandbox
                    });
                });
            }
        });
    },

    getTravelRequirements: function (packageSysId) {
        var packageId = packageSysId ? packageSysId : this.acquisitionPackage.sys_id;
        var limit = 50; // arbitrary
        return new global.GlideQuery(Igce.prototype.TRAVEL_REQ_TABLE)
            .where("acquisition_package", packageId)
            .select(Igce.prototype.TRAVEL_REQ_FIELDS)
            .toArray(limit);
    },
    getTravelRequirementsProperties: function (travel) {
        travel.forEach(function (item) {
            if (item.selected_periods) {
                Igce.prototype.getInstancePeriodInfo(instance_data);
            }
        });
    },
    getIgceEstimates: function (packageSysId) {
        var packageId = packageSysId ? packageSysId : this.acquisitionPackage.sys_id;
        var limit = 50; // arbitrary
        return new global.GlideQuery(Igce.prototype.IGCE_ESTIMATE_TABLE)
            .where("acquisition_package", packageId)
            .select(Igce.prototype.IGCE_ESTIMATE_FIELDS)
            .toArray(limit);
    },
    getIgceInstanceData: function (table, id) {
        var instance_data = new global.GlideQuery(table).get(id, Igce.prototype.SELECTED_PERIOD_FIELDS).orElse(null);
        var instance_data_with_periods = Igce.prototype.getInstancePeriodInfo(instance_data);
        return instance_data_with_periods;
    },
    getClassificationLevel: function (classificationId) {
        var classification_level = new global.GlideQuery(Igce.prototype.CLASSIFICATION_LEVEL_TABLE).get(classificationId, ["classification"]).orElse(null);
        return classification_level.classification;
    },
    determineIdiqClin: function (classification, idiq_clin_type) {
        if (classification === "U" && idiq_clin_type === "CLOUD") {
            return "x001/x017 Cloud UNCLASSIFIED"
        }
        if (classification === "U" && idiq_clin_type === "CLOUD_SUPPORT") {
            return "x002/x018 Cloud Support UNCLASSIFIED"
        }
        if (classification === "S" && idiq_clin_type === "CLOUD") {
            return "x003/x019 Cloud SECRET CLASSIFIED"
        }
        if (classification === "S" && idiq_clin_type === "CLOUD_SUPPORT") {
            return "x004/x020 Cloud Support SECRET CLASSIFIED"
        }
        if (classification === "TS" && idiq_clin_type === "CLOUD") {
            return "x005/x021 Cloud TOP SECRET CLASSIFIED"
        }
        if (classification === "TS" && idiq_clin_type === "CLOUD_SUPPORT") {
            return "x006/x022 Cloud Support TOP SECRET CLASSIFIED"
        }

        // TODO: add option for (x007 Travel)
    },
    getIgceProperties: function (igce) {
        // Set up IGCE object to parse through
        igce.forEach(function (item) {
            gs.info(JSON.stringify(item));

            // IGCE estimate will always have one of the following fields:
            // - environment_instance
            // - classification_instance
            // - cross_domain_solution
            if (item.environment_instance) {
                item.instance_info = Igce.prototype.getIgceInstanceData(Igce.prototype.ENV_INST_TABLE, item.environment_instance);
            }
            else if (item.classification_instance) {
                item.instance_info = Igce.prototype.getIgceInstanceData(Igce.prototype.CLASS_INST_TABLE, item.classification_instance);
            }
            else if (item.cross_domain_solution) {
                item.instance_info = Igce.prototype.getIgceInstanceData(Igce.prototype.CROSS_DOMAIN_SOLN_TABLE, item.cross_domain_solution);
            }
            // Get classification level
            if (item.classification_level) {
                item.classification_level = Igce.prototype.getClassificationLevel(item.classification_level)
            }

        });
    },

    getPayload: function () {
        var acq_package = this.acquisitionPackage;
        var periodOfPerformance = acq_package.period_of_performance;
        var fundingRequest = acq_package.funding_request;

        // Get Periods for Period's Estimate
        var periodsEstimate = this.getPackagePeriods(
            periodOfPerformance.base_period, periodOfPerformance.option_periods
        );

        // Get Funding Request
        var fundingDocument;
        if (fundingRequest) {
            if (fundingRequest.funding_request_type == "MIPR") {
                fundingDocument = {
                    "fundingType": fundingRequest.funding_request_type.toString(),
                    "miprNumber": fundingRequest.mipr.mipr_number.toString()
                }
            }
            else if (fundingRequest.funding_request_type == "FS_FORM") {
                fundingDocument = {
                    "fundingType": fundingRequest.funding_request_type.toString(),
                    "gtcNumber": fundingRequest.fs_form.gt_c_number.toString(),
                    "orderNumber": fundingRequest.fs_form.order_number.toString()
                }
            }
        }
        // TODO -> get travel requirements and map them to periods estimate
        // not sure if we need to use travel estimate or travel requirement (probably use travel requirement).
        // Whichever table is selected should be added to the IGCE Estimates table
        // var travel = this.getTravelRequirements(this.acquisitionPackage.sys_id);

        // Get all IGCE Estimates that have the acquisition package as the FK
        var igce = this.getIgceEstimates(this.acquisitionPackage.sys_id);
        // Determine selected_periods for instance_info and classification_level
        this.getIgceProperties(igce);
        // Map igce estimates to periods estimate
        this.mapIgceToPeriodsEstimate(igce, periodsEstimate);

        // IGCE generated-document payload
        var igce_payload = {
            documentType: "INDEPENDENT_GOVERNMENT_COST_ESTIMATE",
            templatePayload: {
                fundingDocument: fundingDocument,
                periodsEstimate: periodsEstimate,
            }
        };
        // Format the final payload
        return igce_payload;
    }
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>jeff.segal-ctr</sys_created_by>
        <sys_created_on>2022-10-12 15:53:33</sys_created_on>
        <sys_id>b29002b097a211106fa8b4b3f153afc4</sys_id>
        <sys_mod_count>20</sys_mod_count>
        <sys_name>Igce</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_b29002b097a211106fa8b4b3f153afc4</sys_update_name>
        <sys_updated_by>zach.clark-ctr@ccpo.mil</sys_updated_by>
        <sys_updated_on>2022-12-24 03:15:23</sys_updated_on>
    </sys_script_include>
</record_update>
