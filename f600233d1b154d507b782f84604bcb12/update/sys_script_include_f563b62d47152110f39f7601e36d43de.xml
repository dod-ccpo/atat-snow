<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.HothProvisioning</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>ATAT class for containing logic for performing tasks related to HOTH provisioning, including &#13;
constructing payloads and parsing responses. &#13;
&#13;
In order to keep track of where this class is used, the following list is provided. Used in the &#13;
following locations:&#13;
- PROV: Queue Initial Portfolio Provisioning Job (action)&#13;
</description>
        <name>HothProvisioning</name>
        <script><![CDATA[var HothProvisioning = Class.create();
HothProvisioning.prototype = {
	PORTFOLIO_TABLE: "x_g_dis_atat_portfolio",
	TASK_ORDER_TABLE: "x_g_dis_atat_task_order",
	OPERATOR_TABLE: "x_g_dis_atat_operator",
	CLIN_TABLE: "x_g_dis_atat_clin",

	portfolio: null,
	errUtil: new ErrorHandler(),

	initialize: function(portfolioRecord) {
		if (!portfolioRecord) {
			throw this.errUtil.createError(
				"Portfolio must not be null.",
				this.errUtil.INVALID_INPUT
			);
		}
		else {
			this.portfolio = portfolioRecord;
		}
	},
	
	/**
   * Truncates the days from Date Strings. Temporarily needed because of a mistaken change in the ATAT 1.1.0 specification.
   *
   * @param {string} YYYY-MM-DD formatted Date String
   * @return {string} YYYY-MM formatted Date String
   */	
	truncateDayFromDate: function(date) {
		if (date && date.length >= 7) {
			return date.substring(0,7);
		}
		else {
			return date;
		}
	},

	/**
   * Converts a SNOW-formatted Date into a HOTH-formatted Date
   *
   * @param {string} snowClassification
   * @return {string} HOTH-formatted Date
   */
	convertClassificationToHothFormat: function(snowClassification) {
		var classificationMap = {
			U: "UNCLASSIFIED",
			S: "SECRET",
			TS: "TOP_SECRET"
		};
		return classificationMap[snowClassification];		
	},

	/**
   * Converts a HOTH-formatted Date into a SNOW-formatted Date
   *
   * @param {string} hothClassification
   * @return {string} SNOW-formatted Date
   */	
	convertClassificationToSnowFormat: function(hothClassification) {
		var classificationMap = {
			"UNCLASSIFIED" : "U",
			"SECRET": "S",
			"TOP_SECRET": "TS"
		};
		return classificationMap[hothClassification];
	},	

	/**
   * Get all CLINs associated with a Task Order
   *
   * @param {string} taskOrderSysId
   * @return {Object[]} an array of CLINs
   */
	getClins: function(taskOrderSysId) {
		try {
			var clinTableFields = [
				"clin_number", "pop_start_date", "pop_end_date", "classification_level", "type", 
			];
			
			var scope = this;
			return new global.GlideQuery(this.CLIN_TABLE)
				.where("task_order", taskOrderSysId)
				.select(clinTableFields)
				.toArray(2000)
				.map(removeSysId)
				.map(function(clin) {
				clin.classification_level = scope.convertClassificationToHothFormat(clin.classification_level);
				// START DATE FIX
				// REMOVE THIS (once we add days back to the CLIN date format in the ATAT spec)
				clin.pop_start_date = scope.truncateDayFromDate(clin.pop_start_date);				
				clin.pop_end_date = scope.truncateDayFromDate(clin.pop_end_date);
				// END DATE FIX
				return clin;
			})

		} catch (error) {
			throw this.errUtil.createError(
				"HothProvisioning --> getClins(): " + error,
				this.errUtil.METHOD_ERROR
			);
		}
	},

	/**
   * Get all Task Orders associated with a Portfolio
   *
   * @return {Object[]} an array of task orders 
   */
	getTaskOrders: function() {
		try {
			var taskOrders = [];
			var taskOrderRecords = new GlideRecord(this.TASK_ORDER_TABLE);
			taskOrderRecords.addQuery("portfolio", this.portfolio.sys_id.toString());
			taskOrderRecords.query();
			
			while (taskOrderRecords.next()) {
				// Get Task Order CLINs
				var taskOrderClins = this.getClins(taskOrderRecords.sys_id.toString());		

				// Gather Task Orders for a given Portfolio
				taskOrders.push({
					taskOrderNumber: taskOrderRecords.task_order_number.toString(),
					popStartDate: this.truncateDayFromDate(taskOrderRecords.pop_start_date.toString()),
					popEndDate: this.truncateDayFromDate(taskOrderRecords.pop_end_date.toString()),
					clins: taskOrderClins,
				});
			}		

			return taskOrders;
		} catch (error) {
			throw this.errUtil.createError(
				"HothProvisioning --> getTaskOrders(): " + error,
				this.errUtil.METHOD_ERROR
			);
		}
	},
	/**
   * Construct a request to provision a Portfolio using the HOTH API.
   *
   * @param {string} hothId - a GUID generated within ServiceNow for the provisioning job
   * @param {string} targetCsp - a GUID generated within ServiceNow
   * @param {string} operation - the provisioning operation (e.g., ADD_ENVIRONMENT)
   * @return {Object} an object for provisioning a portfolio
   */
	createAddPortfolioPayload: function(hothId, targetCsp) {
		try {
			if (!hothId || !targetCsp) {
				throw this.errUtil.createError(
					"hothId and targetCsp must be provided.",
					this.errUtil.INVALID_INPUT
				);
			}
		
			var taskOrders = this.getTaskOrders(this.portfolio.sys_id.toString());

			return {
				jobId: hothId,
				userId: this.portfolio.portfolio_managers ? this.portfolio.portfolio_managers.split(",")[0] : "",
				operationType: "ADD_PORTFOLIO",
				targetCspName: targetCsp, 
				payload: {
					name: this.portfolio.name.toString(),
					taskOrders: taskOrders,
				},
			};

		} catch (error) {
			var errorMessage = "Error creating an Add Portfolio payload. " + error;
			this.errUtil.createError(
				errorMessage,
				this.errUtil.INVALID_INPUT
			);
		}
	},

	/**
   * Construct a request to provision an Environment using the HOTH API.
   *
   * @param {string} environmentRecord - the Environment being provisioned
   * @return {Object} a valid ADD_ENVIRONMENT Provisioning Job Payload
   */
	createAddEnvironmentPayload: function(environmentRecord) {
		if (!environmentRecord) {
			throw this.errUtil.createError(
				"Environment must not be null.",
				this.errUtil.INVALID_INPUT
			);
		}

		var scope = this;
		var hothClassificationLevel = this.convertClassificationToHothFormat(environmentRecord.classification_level.toString());
		var jobPayload = {
			jobId: gs.generateGUID(),
			userId: this.portfolio.portfolio_managers ? this.portfolio.portfolio_managers.split(",")[0] : "",
			operationType: "ADD_ENVIRONMENT",
			targetCspName: environmentRecord.csp.name.toString(), 
			portfolioId: this.portfolio.csp_id.toString(),
			payload: {
				name: environmentRecord.name.toString(),				
				classificationLevel: hothClassificationLevel,
				cloudDistinguisher: environmentRecord.csp.cloud_distinguisher ? JSON.parse(environmentRecord.csp.cloud_distinguisher) : null,
				administrators: environmentRecord.pending_operators ? 
				environmentRecord.pending_operators.toString().split(",")
				.map(function (operatorSysId) {
					var record = new GlideRecord(scope.OPERATOR_TABLE);
					record.get(operatorSysId);
					return {
						email: record.email.toString(),
						dodId: record.dod_id.toString()				
					};
				})
				: null
			},
		};
		if (environmentRecord.csp.cloudDistinguisher) {
			jobPayload.payload.cloudDistinguisher = environmentRecord.csp.cloudDistinguisher;
		}
		return jobPayload;
	},	

	type: 'HothProvisioning'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>julius.fitzhugh-ctr</sys_created_by>
        <sys_created_on>2023-02-28 20:22:38</sys_created_on>
        <sys_id>f563b62d47152110f39f7601e36d43de</sys_id>
        <sys_mod_count>38</sys_mod_count>
        <sys_name>HothProvisioning</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_f563b62d47152110f39f7601e36d43de</sys_update_name>
        <sys_updated_by>1370228783.CTR</sys_updated_by>
        <sys_updated_on>2023-04-04 20:50:30</sys_updated_on>
    </sys_script_include>
</record_update>
