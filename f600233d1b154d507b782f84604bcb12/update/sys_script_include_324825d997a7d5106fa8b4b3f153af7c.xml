<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.RequirementsChecklist</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>ATAT class for creating a Requirements Checklist document payload and related functionality.&#13;
Payload is sent to the HOTH API for document generation.&#13;
</description>
        <name>RequirementsChecklist</name>
        <script><![CDATA[var RequirementsChecklist = Class.create();
RequirementsChecklist.prototype = {
	errUtil: new ErrorHandler(),
	atatUtil: new AtatHelper(),
	acquisitionPackage: null,

	initialize: function(acqPackage) {
		this.acquisitionPackage = acqPackage;
	},
	mapPeriods: function(periods) {
		return periods.map(function(period) {
			// map properties according to HOTH API
			period.periodType = period.period_type;
			period.periodUnitCount = period.period_unit_count;
			period.periodUnit = period.period_unit;
			period.optionOrder = period.option_order;

			// remove old properties	
			delete period.period_type;
			delete period.period_unit_count;
			delete period.period_unit;
			delete period.option_order;

			return period;
		});
	},

	mapContact: function(contact) {
		return {
			name: contact.formal_name.toString(),
			phoneNumber: contact.phone_and_extension.toString(),
			email: contact.email.toString(),
			dodaac: contact.dodaac.toString()
		};
	},
	/**
	 * Gets a list of prior Contracts related to the specified acquisition package.
	 * @param {string} the acquistion package identifier
	 * @return {array} a list of contracts
	 */
	//TODO refactor this into ATATUtil
	getContractInformation: function(packageId) {

		try{			
			var ctb = convertToBoolean;
			var fields = ["contract_number", "current_contract_exists", "contract_order_expiration_date", 
						"incumbent_contractor_name", "task_delivery_order_number", 
						"contract_order_start_date", "business_size", "competitive_status",
						];			
			const contracts = new global.GlideQuery("x_g_dis_atat_current_contract_and_recurring_information")
			.where("acquisition_package", packageId)
			.orderByDesc("contract_order_expiration_date")
			.select(fields)
			.toArray(100)
			.map(function(contract) {
				const record = new GlideRecord("x_g_dis_atat_current_contract_and_recurring_information");
				record.get(contract.sys_id);
				contract.current_contract_exists = ctb(contract.current_contract_exists);
				contract.business_size = record.getDisplayValue("business_size");
				contract.competitive_status = record.getDisplayValue("competitive_status");

				var startDate = new GlideDate();
				startDate.setValue(contract.contract_order_start_date);
				contract.contract_order_start_date = startDate.getByFormat("MMMM dd, yyyy");
				
				var endDate = new GlideDate();
				endDate.setValue(contract.contract_order_expiration_date);
				contract.contract_order_expiration_date = endDate.getByFormat("MMMM dd, yyyy");
				
				return contract;
			});

			

			return RequirementsChecklist.prototype.atatUtil.snakeToCamelCase(contracts, fields);
		} catch (error) {
			throw this.errUtil.createError(
				"RequirementsChecklist --> getContractInformation(): " + error,
				this.errUtil.METHOD_ERROR
			);
		}
	},
	getPayload: function() {
		try {
			var fundingRequest = this.acquisitionPackage.funding_request;
			var fundingDocument;
			if (fundingRequest) {
            if (fundingRequest.funding_request_type == "MIPR") {
                fundingDocument = {
                    fundingType: fundingRequest.funding_request_type.toString(),
                    miprNumber: fundingRequest.mipr.mipr_number ? fundingRequest.mipr.mipr_number.toString() : "",
					gtcNumber: "TBD" //Will be generated later?
                };
            } else if (fundingRequest.funding_request_type == "FS_FORM") {
                fundingDocument = {
                    fundingType: fundingRequest.funding_request_type ? fundingRequest.funding_request_type.toString() : '',
                    gtcNumber: fundingRequest.fs_form.gt_c_number ? fundingRequest.fs_form.gt_c_number.toString() : 'TBD',
                    orderNumber: fundingRequest.fs_form.order_number ? fundingRequest.fs_form.order_number.toString() : "",
                };
            }
        }
			else {
				fundingDocument = {
                    fundingType: '',
                    miprNumber: "",
					gtcNumber: "TBD" //Will be generated later?
                };
			}
			var acqPackage = this.acquisitionPackage;
			var ctb = convertToBoolean;
			var cc = acqPackage.current_contract_and_recurring_information;
			var pop = acqPackage.period_of_performance;
			//var currContractExists = ctb(cc.current_contract_exists.toString());

			if (!pop.base_period.toString()) {
				var pkgInfo = this.errUtil.getRecordLogInfo(acqPackage, "number");
				throw this.errUtil.createError(
					"No base period provided for " + pkgInfo.allInfo,
					this.errUtil.INVALID_INPUT
				);
			}
			// periods (there should only be one base period)
			var basePeriod = this.atatUtil.getPeriods(pop.base_period);
			basePeriod = this.mapPeriods(basePeriod).map(removeSysId)[0];
			var optionPeriods = [];
			if (pop.option_periods.toString()) {
				optionPeriods = this.atatUtil.getPeriods(pop.option_periods);
				optionPeriods = this.mapPeriods(optionPeriods)
					.map(removeSysId)
					.sort(function(a, b) { return a.optionOrder - b.optionOrder; });
			}

			return {
				documentType: "REQUIREMENTS_CHECKLIST",
				templatePayload: {
					projectOverview: {
						title: acqPackage.project_overview.title.toString(),
						scope: acqPackage.project_overview.scope.toString(),
						emergencyDeclaration: ctb(acqPackage.project_overview.emergency_declaration.toString()),
					},
					organization: {
						agency: acqPackage.organization.agency.label.toString(),
						name: acqPackage.organization.computed_name.toString(),
					},
					contacts: {
						missionOwnerName: this.atatUtil.getFirstMissionOwner(acqPackage).name.toString(),
						cor: this.mapContact(acqPackage.cor),
						acor: acqPackage.acor ? this.mapContact(acqPackage.acor) : null,
						primaryContact: acqPackage.primary_contact ? this.mapContact(acqPackage.primary_contact) : null, 
					},
					currentContract: this.getContractInformation(acqPackage.sys_id),
					exceptionToFairOpportunity: acqPackage.fair_opportunity.exception_to_fair_opportunity.toString(),
					fundingDocument: fundingDocument,
					periodOfPerformance: {
						basePeriod: basePeriod,
						isRequirementFollowOnProcurementSoleSourced: ctb(pop.is_requirement_follow_on_procurement_sole_sourced.toString()),
						optionPeriods: optionPeriods,
						popStartRequest: ctb(pop.pop_start_request.toString()),
						requestedPopStartDate: pop.requested_pop_start_date.toString(),
						timeFrame: pop.time_frame.toString(),
						recurringRequirement: ctb(pop.recurring_requirement.toString()),
					},
					contractType: {
						firmFixedPrice: ctb(acqPackage.contract_type.firm_fixed_price.toString()),
						timeAndMaterials: ctb(acqPackage.contract_type.time_and_materials.toString()),
						justification: acqPackage.contract_type.contract_type_justification.toString(),
					},
					sensitiveInformation: {
						baaRequired: ctb(acqPackage.sensitive_information.baa_required.toString()),
						potentialToBeHarmful: ctb(acqPackage.sensitive_information.potential_to_be_harmful.toString()),
						foiaContact: {
							fullName: acqPackage.sensitive_information.foia_full_name.toString(),
							email: acqPackage.sensitive_information.foia_email.toString(),
							address: this.atatUtil.constructFoiaAddress(acqPackage.sensitive_information),
						},
						section508: {
							section508Sufficient: ctb(acqPackage.sensitive_information.section_508_sufficient.toString()),
						},
					}
				}
			};

		} catch (error) {

			errorMessage = "Error creating the Requirements Checklist payload. " + error;
			this.errUtil.errorLogger(
				this.errUtil.createError(
					errorMessage,
					this.errUtil.INVALID_INPUT
				)
			);
		}

	},

	type: 'RequirementsChecklist'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>julius.fitzhugh-ctr</sys_created_by>
        <sys_created_on>2022-12-02 20:50:47</sys_created_on>
        <sys_id>324825d997a7d5106fa8b4b3f153af7c</sys_id>
        <sys_mod_count>75</sys_mod_count>
        <sys_name>RequirementsChecklist</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_324825d997a7d5106fa8b4b3f153af7c</sys_update_name>
        <sys_updated_by>torin.harthcock</sys_updated_by>
        <sys_updated_on>2023-10-04 17:25:59</sys_updated_on>
    </sys_script_include>
</record_update>
