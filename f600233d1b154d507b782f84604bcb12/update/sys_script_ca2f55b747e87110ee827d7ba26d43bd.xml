<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_g_dis_atat_portfolio</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Email Admins Upon Provisioning</name>
        <order>0</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    const portfolioSysId = current.getValue('sys_id');
    gs.info(`Portfolio ${portfolioSysId}`);
    const environmentGR = new GlideRecord('x_g_dis_atat_environment');
    environmentGR.addQuery('portfolio', portfolioSysId);
    environmentGR.addQuery('classification_level', 'U');
    environmentGR.query();
    const emails = [];
    while (environmentGR.next()) {
		const environmentSysId = environmentGR.getValue('sys_id');
		gs.info(`Portfolio: ${portfolioSysId} Environment: ${environmentSysId}`);
        const operatorGR = new GlideRecord('x_g_dis_atat_operator');
        operatorGR.addQuery(`environment`, environmentSysId);
        operatorGR.query();
        while (operatorGR.next()) {
			const email = operatorGR.getValue('email');
			gs.info(`Operator: ${operatorGR.sys_id} Email: ${email}`);	
            emails.push(email);
        }
    }
    gs.info(`Emails: ${emails}`);
    const uniqueEmails = [...new Set(emails)];
    gs.info(`uniqueEmails: ${uniqueEmails}`);

    uniqueEmails.forEach((email) => {
        gs.info(`Dispatch email to: ${email}`);
        gs.eventQueue('x_g_dis_atat.csp_provisioning', current, email);
    });
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>stephen.hayes</sys_created_by>
        <sys_created_on>2023-08-16 03:24:58</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ca2f55b747e87110ee827d7ba26d43bd</sys_id>
        <sys_mod_count>143</sys_mod_count>
        <sys_name>Email Admins Upon Provisioning</sys_name>
        <sys_overrides/>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy/>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_ca2f55b747e87110ee827d7ba26d43bd</sys_update_name>
        <sys_updated_by>stephen.hayes</sys_updated_by>
        <sys_updated_on>2023-09-12 15:04:01</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=ca2f55b747e87110ee827d7ba26d43bd"/>
</record_update>
