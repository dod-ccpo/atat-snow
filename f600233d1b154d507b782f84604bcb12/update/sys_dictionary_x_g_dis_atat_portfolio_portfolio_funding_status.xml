<?xml version="1.0" encoding="UTF-8"?><record_update>
    <sys_dictionary action="INSERT_OR_UPDATE" element="portfolio_funding_status" table="x_g_dis_atat_portfolio">
        <active>true</active>
        <array>false</array>
        <attributes>edge_encryption_enabled=true</attributes>
        <audit>false</audit>
        <calculation><![CDATA[(function calculatedFieldValue(current) {
    const sysId = current.sys_id;
    const toTable = "x_g_dis_atat_task_order";
    const clinTable = "x_g_dis_atat_clin";
    const toGr = new GlideRecord(toTable);
    const clinGr = new GlideRecord(clinTable);

    toGr.get(current.active_task_order);
    if (toGr.isValidRecord()) {
        const clinsInPeriod = [];
        const allClins = [];
        // split clins into array
        const toClins = toGr.clins.split(',');
        // loop through array, validate valid clin and structure data
        toClins.forEach((clin) => {
            const isValidClin = clinGr.get(clin);
            if (isValidClin) {
                const cs = new ClinService(clinGr);
                if (cs.hasStarted && !cs.hasExpired) {
                    const status = cs.determineStatus();
                    const clinNumber = clinGr.clin_number.toString();
                    const hasObligatedFunds = cs.hasObligatedFunds;
                    const clinData = {
                        status: status,
                        clinNumber: clinNumber,
                        hasFunds: hasObligatedFunds
                    };
                    clinsInPeriod.push(clinData);
                    allClins.push(clinData);
                } else {
                    const status = cs.determineStatus();
                    const clinNumber = clinGr.clin_number.toString();
                    const hasObligatedFunds = cs.hasObligatedFunds;
                    const clinData = {
                        status: status,
                        clinNumber: clinNumber,
                        hasFunds: hasObligatedFunds
                    };
                    allClins.push(clinData);
                }
            }
        });

        if (allClins.length > 0) {
            // cache the metrics of both allClins and clinsInPeriod.
            // This helps avoid multiple loops through each array of clins
            const allClinsBreakdown = {};
            const clinsInPeriodBreakdown = {};
            // collect the number of each status in allClins
            allClins.forEach((clin) => {
                if (allClinsBreakdown[clin.status]) {
                    allClinsBreakdown[clin.status]++;
                } else {
                    allClinsBreakdown[clin.status] = 1;
                }
            });
            allClinsBreakdown.length = allClins.length;
            // collect the number of each status in clinsInPeriod
            clinsInPeriod.forEach((clin) => {
                if (clinsInPeriodBreakdown[clin.status]) {
                    clinsInPeriodBreakdown[clin.status]++;
                } else {
                    clinsInPeriodBreakdown[clin.status] = 1;
                }
            });
            clinsInPeriodBreakdown.length = clinsInPeriod.length;

            //  if all CLINs in all periods have status Expired
            if (allClinsBreakdown.EXPIRED && allClinsBreakdown.EXPIRED === allClinsBreakdown.length) {
                return "EXPIRED";
            }
            //  if any CLIN in current period has status Delinquent
            if (clinsInPeriodBreakdown.DELINQUENT && clinsInPeriodBreakdown.DELINQUENT > 0) {
                return "DELINQUENT";
            }
            //  if any CLIN in current period has status At-Risk OR if FUNDING_AT_RISK
            if (clinsInPeriodBreakdown.FUNDING_AT_RISK && clinsInPeriodBreakdown.FUNDING_AT_RISK > 0 ||
                clinsInPeriodBreakdown.AT_RISK && clinsInPeriodBreakdown.AT_RISK > 0) {
                return "AT_RISK";
            }
            // All CLINs in current period  are Expiring PoP and no follow-on CLIN with obligated funds. If there are follow-on CLIN(s) with obligated               funds, status is On-Track and donâ€™t display an Expiring Soon badge.
            if (clinsInPeriodBreakdown.EXPIRING_POP && clinsInPeriodBreakdown.EXPIRING_POP === clinsInPeriodBreakdown.length) {
                const expectedClins = clinsInPeriod.map((clin) => {
                    let firstTwo = clin.clinNumber.slice(0, 2);
                    const lastTwo = clin.clinNumber.slice(2, clin.clinNumber.length);
                    let expectedClin = "";
                    // if 2nd number in firstTwo is less than 10, increment the number and pad a 0
                    if (parseInt(firstTwo) < 10) {
                        firstTwo = (parseInt(firstTwo) + 1).toString();
                        expectedClin = firstTwo.padStart(2, '0') + lastTwo;
                    } else {
                        // else just increment the number, string it and add them together
                        firstTwo = (parseInt(firstTwo) + 1).toString();
                        expectedClin = firstTwo + lastTwo;
                    }
                    return expectedClin;
                });
                const hasFollowOns = allClins.some((clin) => {
                    if (expectedClins.some((expected) => clin.clinNumber === expected && clin.hasFunds)) {
                        return true;
                    }
                });
                if (!hasFollowOns) {
                    return "EXPIRING_SOON";
                }
            }
        }
        return 'ON_TRACK';
    }
})(current);]]></calculation>
        <choice>1</choice>
        <choice_field/>
        <choice_table/>
        <column_label>Funding Status</column_label>
        <comments/>
        <create_roles/>
        <default_value/>
        <defaultsort/>
        <delete_roles/>
        <dependent/>
        <dependent_on_field/>
        <display>false</display>
        <dynamic_creation>false</dynamic_creation>
        <dynamic_creation_script/>
        <dynamic_default_value/>
        <dynamic_ref_qual/>
        <element>portfolio_funding_status</element>
        <element_reference>false</element_reference>
        <foreign_database/>
        <formula/>
        <function_definition/>
        <function_field>false</function_field>
        <internal_type display_value="Choice">choice</internal_type>
        <mandatory>false</mandatory>
        <max_length>40</max_length>
        <name>x_g_dis_atat_portfolio</name>
        <next_element/>
        <primary>false</primary>
        <read_only>false</read_only>
        <read_roles/>
        <reference/>
        <reference_cascade_rule/>
        <reference_floats>false</reference_floats>
        <reference_key/>
        <reference_qual/>
        <reference_qual_condition/>
        <reference_type/>
        <spell_check>false</spell_check>
        <staged>false</staged>
        <sys_class_name>sys_dictionary</sys_class_name>
        <sys_created_by>jason.burkert-ctr@ccpo.mil</sys_created_by>
        <sys_created_on>2022-10-24 16:27:05</sys_created_on>
        <sys_id>db80119e971121107b1372571153afd8</sys_id>
        <sys_name>Funding Status</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy/>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_dictionary_x_g_dis_atat_portfolio_portfolio_funding_status</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-08-22 20:18:21</sys_updated_on>
        <table_reference>false</table_reference>
        <text_index>false</text_index>
        <unique>false</unique>
        <use_dependent_field>false</use_dependent_field>
        <use_dynamic_default>false</use_dynamic_default>
        <use_reference_qualifier>simple</use_reference_qualifier>
        <virtual>true</virtual>
        <virtual_type>script</virtual_type>
        <widget/>
        <write_roles/>
        <xml_view>false</xml_view>
    </sys_dictionary>
</record_update>
