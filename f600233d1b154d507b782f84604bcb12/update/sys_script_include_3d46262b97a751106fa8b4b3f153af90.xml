<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.Dow</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>ATAT class for creating an Description Of Work (DOW) payload and related functionality.&#13;
Payload is sent to the HOTH API for document generation.&#13;
</description>
        <name>Dow</name>
        <script><![CDATA[var Dow = Class.create();
Dow.prototype = {
  AWARDS_HIS_TABLE: "x_g_dis_atat_award_history",
  SELECTED_CLASS_LVL_TABLE: "x_g_dis_atat_selected_classification_level",
  SELECTED_SER_OFF_TABLE: "x_g_dis_atat_selected_service_offering",
  ENV_INST_TABLE: "x_g_dis_atat_environment_instance",
  CUR_ENV_INST_TABLE: "x_g_dis_atat_current_environment_instance",
  COMP_ENV_INST_TABLE: "x_g_dis_atat_compute_environment_instance",
  DB_ENV_ISNT_TABLE: "x_g_dis_atat_database_environment_instance",
  CLOUD_SUP_ENV_ISNT_TABLE: "x_g_dis_atat_cloud_support_environment_instance",
  CLASS_LVL_TABLE: "x_g_dis_atat_classification_level",
  CLASS_INFO_TYPE_TABLE: "x_g_dis_atat_classified_information_type",
  REGION_TABLE: "x_g_dis_atat_region",
	
  // base instance fields
  ENV_INST_FIELDS: [
    "instance_name", "instance_location", "number_of_instances",
    "operating_system", "licensing", "region",
    "need_for_entire_task_order_duration", "selected_periods",
    "classification_level", "classified_information_types",
    "data_egress_monthly_amount", "data_egress_monthly_unit",
    "memory_amount", "memory_unit", "storage_amount", "storage_unit", "storage_type",
    "number_of_vcpus", "performance_tier", "processor_speed",
    "pricing_model", "pricing_model_expiration",
  ],
  // additional instance fields
  CUR_ENV_INST_FIELDS: [
    "operating_type", "operating_environment", "deployed_regions", "users_per_region",
    "is_traffic_spike_event_based", "traffic_spike_event_description",
    "is_traffic_spike_period_based", "traffic_spike_period_description",
    "additional_information", "current_usage_description", "anticipated_need_usage",
  ],
  COMP_ENV_INST_FIELDS: ["environment_type", "operating_type"],
  DB_ENV_INST_FIELDS: ["database_licensing", "database_type", "databse_type_other"],
  CLOUD_SUP_ENV_INST_FIELDS: [

  ],

  SELECTED_CLASS_LVL_FIELDS: [
    "classification_level", "classified_information_types",
    "data_egress_monthly_amount", "data_egress_monthly_unit",
    "users_per_region", "increase_in_users", "data_increase",
    "user_growth_estimate_percentage", "user_growth_estimate_type",
    "data_growth_estimate_percentage", "data_growth_estimate_type",
  ],

  atatUtil: new AtatHelper(),
  errUtil: new ErrorHandler(),
  arrUtil: new global.ArrayUtil(),
  ctb: this.convertToBoolean,
  acquisitionPackage: null,
  mappedPeriods: null,

  initialize: function(acqPackage) {
    this.acquisitionPackage = acqPackage;
  },

  /**
   * Format awards to be camelCase for HOTH API specicification.
   *
   * @param {GlideRecord} award - an award record
   * return {object} award with camelCase properties
   */
  mapAwards: function(awards) {
    try {
      return awards.map(function(award) {
        award.contractAwardType = award.contract_award_type;
        award.effectiveDate = award.effective_date;
        award.modificationOrder = award.modification_order;

        // remove previous properties
        delete award.contract_award_type;
        delete award.effective_date;
        delete award.modification_order;

        return award;
      });

    } catch (error) {
      throw this.errUtil.createError(
        "Dow --> mapAwards(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }
  },
  /**
   * Gather the contract award and modifications for a given package.
   *
   * @param {array} awardIds - list of award records (awards or modifications)
   * @return {array} award records
   */
  getAwardHistory: function(awardIds) {
    try {
      return getListRecords(
        awardIds,
        ['contract_award_type', 'modification_order', 'effective_date'],
        this.AWARDS_HIS_TABLE)
        .map(removeSysId);

    } catch (error) {
      throw this.errUtil.createError(
        "Dow --> getAwardHistory(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }
  },
  /**
   * Get classification level
   *
   * @param {array} classLevelIds - classification level ids
   * @return {array} array of classification level objects 
   */
  getClassificationLevels: function(classLevelIds) {
    if (!classLevelIds) {
      gs.info("No Classification Level ids provided.");
      return [];
    }
    try {
      return getListRecords(
        classLevelIds,
        ["classification", "display", "impact_level"],
        this.CLASS_LVL_TABLE
      ).map(removeSysId);

    } catch (error) {
      throw this.errUtil.createError(
        "Dow --> getClassificationLevels(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }

  },
  /**
   * Get classified information types
   *
   * @param {array} classTypeIds - classified info type ids
   * @return {array} array of classifed info type objects 
   */
  getClassifiedInfoTypes: function(classTypeIds) {
    if (!classTypeIds) {
      gs.info("No Classified Inofrmation Type ids provided.");
      return [];
    }
    try {
      return getListRecords(
        classTypeIds,
        ["name", "description", "sequence"],
        CLASS_INFO_TYPE_TABLE
      ).map(removeSysId);

    } catch (error) {
      throw this.errUtil.createError(
        "Dow --> getClassifiedInfoTypes(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }

  },
  /**
   * Get regions 
   *
   * @param {array} regionIds - region ids
   * @return {array} array of region objects 
   */
  getRegions: function(regionIds) {
    if (!regionIds) {
      gs.info("No Region ids provided.");
      return [];
    }
    try {
      return getListRecords(
        regionIds,
        ["name", "description", "sequence", "group"],
        this.REGION_TABLE 
      ).map(removeSysId);

    } catch (error) {
      throw this.errUtil.createError(
        "Dow --> getRegions(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }

  },
  /**
   * Get current environment instances.
   *
   * @return {array} an array of current environment instances
   */
  getCurrentEnvInstances: function() {
    try {
      var mappedPeriods = this.mappedPeriods;
      var ctb = this.ctb;

      var currentEnvInstances = this.findPackageRecords(this.CUR_ENV_INST_TABLE);
      currentEnvInstances = this.atatUtil.snakeToCamelCase(
        currentEnvInstances,
        this.arrUtil.concat(this.ENV_INST_FIELDS, this.CUR_ENV_INST_FIELDS)
      );

      return currentEnvInstances.map(function(instance) {
        // format special case properties (e.g, nested records, YES/NO fields, etc.)
        instance["isTrafficSpikeEventBased"] = ctb(instance.isTrafficSpikeEventBased);
        instance["isTrafficSpikePeriodBased"] = ctb(instance.isTrafficSpikePeriodBased);
        instance["needForEntireTaskOrderDuration"] = ctb(instance.needForEntireTaskOrderDuration);
        instance["region"] = Dow.prototype.getRegions(instance.region);
        instance["deployedRegions"] = Dow.prototype.getRegions(instance.deployedRegions);
        instance["classifiedInformationTypes"] = Dow.prototype.getClassifiedInfoTypes(
          instance.classifiedInformationTypes
        );
        if (!instance.needForEntireTaskOrderDuration) {
          instance["selectedPeriods"] = instance.selectedPeriods
            .split(",")
            .map(function(periodId) {
              return mappedPeriods[periodId];
          });
        }

        return instance;
      });

    } catch (error) {
      throw this.errUtil.createError(
        "Dow --> getCurrentEnvInstances(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }

  },

  /**
   * Gather current environment information.
   *
   * @param {GlideRecord} currentEnv - current environment record
   * @return {object} a currentEnvironment object containing relevant information
   */
  getCurrentEnvironmentInfo: function(currentEnv) {
	var ctb = this.ctb;
    try {
      // sections 3 and 4.1 of DOW
      return {
        // background
        currentEnvironmentExists: ctb(currentEnv.current_environment_exists),
        hasSystemDocumentation: ctb(currentEnv.has_system_documentation),
        // Q: are these documents to be included in the package or do they have
        // to be included in the actual DOW?
        systemDocumentation: currentEnv.system_documentation.toString(), // List
        hasMigrationDocumentation: ctb(currentEnv.has_migration_documentation),
        migrationDocumentation: currentEnv.migration_documentation.toString(), // List
        envLocation: currentEnv.env_location.toString(), // CLOUD/HYBRID/ON_PREM
        // TODO: get information for impact levels
        envClassificationsCloud: currentEnv.env_classifications_cloud.toString(), // List
        envClassificationsOnprem: currentEnv.env_classifications_onprem.toString(), // List
        // environment instances 
        // Q: current usage?? Evenly/Event/HighUsage
        // contained inside each instance
        envInstances: this.getCurrentEnvInstances(), // List


        // currentEnv
        additionalGrowth: ctb(currentEnv.additional_growth),
        anticipatedYearlyAdditionalCapacity: parseInt(currentEnv.anticipated_yearly_additional_capacity),
        // replicated or optimized
        currentEnvironmentReplicatedOptimized: currentEnv.current_environment_replicated_optimized.toString(),
        statementReplicatedOptimized: currentEnv.statement_replicated_optimized.toString(),
        hasPhasedApproach: ctb(currentEnv.has_phased_approach),
        phasedApproachSchedule: currentEnv.phased_approach_schedule.toString(),
        // architect design
        needsArchitecturalDesignServices: ctb(currentEnv.needs_architectural_design_services),
        statementArchitecturalDesign: currentEnv.statement_architectural_design.toString(),
        // TODO: get information for impact levels
        dataClassificationsImpactLevels: currentEnv.data_classifications_impact_levels.toString(), // List
        externalFactorsArchitecturalDesign: currentEnv.external_factors_architectural_design.toString(),
        applicationsNeedArchitecturalDesign: currentEnv.applications_need_architectural_design.toString(),
        // cloud support needed
        // Q: should there be an option for this in currentEnv??
      };

    } catch (error) {
      throw this.errUtil.createError(
        "Dow --> getCurrentEnvironmentInfo(): " + error,
        this.errUtil.METHOD_ERROR
		);
    }

  },
  /**
   * Get Selected Service Offerings that related to section 4.2.x.x to 4.3.x.x
   * The Selected Service Offerings are for XaaS, Cloud Support Packages.
   *
   * @param {array} selectedServiceIds - a list of selected service offering ids 
   * @return {array} of selected service offerings with information for each
   */
  getSelectedServiceOfferings: function(selectedServiceIds) {
    try {
      var requiredFields = [
        "classification_instances", "estimated_environment_instances",
        "service_offering", "other_service_offering"
      ];
      return getListRecords(selectedServiceIds, requiredFields, this.SELECTED_SER_OFF_TABLE);

    } catch (error) {
      throw this.errUtil.createError(
        "Dow --> getSelectedServiceOfferings(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }

  },
  /**
   * Get a Package Period of Performance (PoP).
   *
   * @param {GlideRecord} pop - a package period of perforamnce record
   * @param {object} mappedPeriods - mapping of package periods
   * @return {object} a package PoP with required information 
   */
  getPackagePop: function(pop, mappedPeriods) {
    try {
      var optionPeriods = [];
      pop.option_periods.split(",").forEach(function(id) { optionPeriods.push(mappedPeriods[id]); });
      return {
        basePeriod: mappedPeriods[pop.base_period.toString()],
        optionPeriods: optionPeriods,
        popStartRequest: this.ctb(pop.pop_start_request),
        requestedPopStartDate: pop.requested_pop_start_date.toString(),
        timeFrame: pop.time_frame.toString(),
        recurringRequirement: this.ctb(pop.recurring_requirement)
      };

    } catch (error) {
      throw this.errUtil.createError(
        "Dow --> getPackagePop(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }

  },
  /**
   * Get a Package Selected Classification Levels.
   *
   * @param {string} classificationLevelIds - a package selected classification level ids
   * @return {array} a package selected classification levels 
   */
  getSelectedClassificationLevels: function() {
    try {
      // variables initiatized again here due to the "this" keyword being used inside of the
      // map function where "this" is not referencing the "Dow" class
      // this allows for them to be used inside the map function
      var ctb = this.ctb;
      var CLASS_LVL_TABLE = this.CLASS_LVL_TABLE;
      var CLASS_INFO_TYPE_TABLE = this.CLASS_INFO_TYPE_TABLE;

      var selectedClassificationLevels = this.findPackageRecords(this.SELECTED_CLASS_LVL_TABLE);
      selectedClassificationLevels = this.atatUtil.snakeToCamelCase(
        selectedClassificationLevels, 
        this.SELECTED_CLASS_LVL_FIELDS
      );

      return selectedClassificationLevels.map(function(selectedLevel) {
		// formating special case properties (e.g, nested records, YES/NO fields)
        selectedLevel["dataIncrease"] = ctb(selectedLevel.dataIncrease);
        selectedLevel["usersIncrease"] = ctb(selectedLevel.increaseInUsers);

        selectedLevel["classificationLevel"] = getListRecords(
          selectedLevel.classificationLevel,
          ["classification", "display", "impact_level"],
          CLASS_LVL_TABLE
        ).map(removeSysId);

        selectedLevel["classifiedInformationTypes"] = getListRecords(
          selectedLevel.classifiedInformationTypes,
          ["name", "description", "sequence"],
          CLASS_INFO_TYPE_TABLE
        ).map(removeSysId);

        return selectedLevel;
      });

    } catch (error) {
      throw this.errUtil.createError(
        "Dow --> getSelectedClassificationLevels(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }
  },

  /**
   * Query a table and find records related to a package. 
   * Only the first 50 records are returned.
   *
   * @param {string} table - table to query for related package records
   * @return {array} records found from querying a table
   */
  findPackageRecords: function(table) {
    var limit = 50;

    switch (table) {
      case this.ENV_INST_TABLE:
        return new global.GlideQuery(table)
          .where("acquisition_package", this.acquisitionPackage.sys_id)
          .select(this.ENV_INST_FIELDS)
          .toArray(limit);
      case this.CUR_ENV_INST_TABLE:
        return new global.GlideQuery(table)
          .where("acquisition_package", this.acquisitionPackage.sys_id)
          .select(this.arrUtil.concat(this.ENV_INST_FIELDS, this.CUR_ENV_INST_FIELDS))
          .toArray(limit);
      case this.COMP_ENV_INST_TABLE:
        return new global.GlideQuery(table)
          .where("acquisition_package", this.acquisitionPackage.sys_id)
          .select(this.arrUtil.concat(this.ENV_INST_FIELDS, this.COMP_ENV_INST_FIELDS))
          .toArray(limit);
      case this.SELECTED_CLASS_LVL_TABLE:
        return new global.GlideQuery(table)
          .where("acquisition_package", this.acquisitionPackage.sys_id)
          .select(this.SELECTED_CLASS_LVL_FIELDS)
          .toArray(limit);
      default:
        return [];
    }

  },

  /**
   * Gather all information needed for DOW document generation and 
   * creates a payload. Instantiate the DOW class with an acquistion
   * package record before using this method.
   * 
   * return {object} - an DOW payload for HOTH API
   */
  getPayload: function() {
    try {
      var ctb = this.ctb;
      var acqPacakage = this.acquisitionPackage;
      var cci = acqPacakage.current_contract_and_recurring_information;
      var cc = acqPacakage.contract_considerations;
      
      // award related 
      var awardIds = acqPacakage.contract_award + "," + acqPacakage.contract_modifications;

      // Pop related
      var pop = acqPacakage.period_of_performance;
      var periods = this.atatUtil.getPeriods(pop.base_period + "," + pop.option_periods);
      this.mappedPeriods = this.atatUtil.mapPackagePeriods(periods);


      // hoth DoW generated-document payload
      return {
        documentType: "DESCRIPTION_OF_WORK_DOCX",
        templatePayload: {
          // initial award and modifications; first table at top
          awardHistory: this.mapAwards(this.getAwardHistory(awardIds)),

          // second table at top
          contractInformation: {
            currentContractExists: ctb(cci.current_contract_exists),
            contractNumber: cci.contract_number.toString(),
            contractExpirationDate: cci.contract_order_expiration_date.toString(),
            incumbentContractorName: cci.incumbent_contractor_name.toString(),
            previousTaskOrderNumber: cci.task_delivery_order_number.toString()
          },

          // project overview (sections 1 and 2)
          toTitle: acqPacakage.project_overview.title.toString(),
          scope: acqPacakage.project_overview.scope.toString(),
          scopeSurge: acqPacakage.requirements_cost_estimate.surge_capabilities.toString(),

          // sections 3 and 4.1-3 
          currentEnvironment: this.getCurrentEnvironmentInfo(acqPacakage.current_environment),
          selectedClassificationLevels: this.getSelectedClassificationLevels(),

          // section 4.2-4.3
          xaasOfferings: [],
          cloudSupportPackages: [],


          // section 5 - Contract Data Requirements List (CDRL)
          // - no data, text/table only?

          // section 6 - Performance Standards 
          // - no data, text only ?
 
          // section 7
          periodOfPerformance: this.getPackagePop(acqPacakage.period_of_performance, this.mappedPeriods),
          // TODO: add task/subtask selected periods and need for entire duration??

          // section 8 - Security Requirements
          // Selected Classified Levels ??

          // section 9 - GFP/GFE/GFI
          // - no data, text only ?

          // section 10
          contractConsiderations: {
            // 10a
            potentialConflictOfInterest: ctb(cc.potential_conflict_of_interest),
            conflictOfInterestExplanation: cc.conflict_of_interest_explanation.toString(),
            // 10b
            packagingShippingNoneApply: ctb(cc.packaging_shipping_none_apply),
            packagingShippingOther: ctb(cc.packaging_shipping_other),
            packagingShippingOtherExplanation:
              cc.packaging_shipping_other_explanation.toString(),
            contractorProvidedTransfer: ctb(cc.contractor_provided_transfer),
            // 10c Supply Chain Risk Management 
            // - no data, just text?

            // 10d Training 
            // - no data, just text?

            // 10e
            piiPresent: ctb(acqPacakage.sensitive_information.pii_present),
            systemOfRecordName: acqPacakage.sensitive_information.system_of_record_name.toString(),
            // 10f
            travel: [],

            contractorRequiredTraining: ctb(cc.contractor_required_training),

          },

          // section 11
          // - no data, text only?

        }
      };

    } catch (error) {
      var errorMessage = "Error creating the DOW payload. " + error; 
      this.errUtil.errorLogger(
        this.errUtil.createError(
          errorMessage,
          this.errUtil.INVALID_INPUT
        )
      );
    }
  },

  type: 'Dow'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>julius.fitzhugh-ctr</sys_created_by>
        <sys_created_on>2022-12-10 00:50:30</sys_created_on>
        <sys_id>3d46262b97a751106fa8b4b3f153af90</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Dow</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_3d46262b97a751106fa8b4b3f153af90</sys_update_name>
        <sys_updated_by>julius.fitzhugh-ctr</sys_updated_by>
        <sys_updated_on>2022-12-11 03:32:49</sys_updated_on>
    </sys_script_include>
</record_update>
