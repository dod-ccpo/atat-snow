<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_g_dis_atat_requirements_cost_estimate</collection>
        <condition>!current.surge_capabilities.nil()  &amp;&amp; isNaN(parseInt(current.surge_capabilities))  || parseInt(current.surge_capabilities) &lt; 1  || parseInt(current.surge_capabilities) &gt; 50</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>ReqCostEst - Surge Capabilities Limit</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	var errUtil = new ErrorHandler();
	var messageNaN = "Surge Capabilities should be a number (as a string). Please provide a valid number between 1-50.";
	var message = "Surge Capabilities can only be a value between 1-50. Please enter a valid value.";
	
	try {
		// help identify problem record
		var currentRecordInfo = errUtil.getRecordLogInfo(current);
		var additionalInfo = " Requirements Cost Estimate record " + currentRecordInfo.sysId;
		
		// defend against strings that are not numbers
		if (isNaN(parseInt(current.surge_capabilities))) {
			gs.addInfoMessage(messageNaN);
			messageNaN += additionalInfo;
			gs.warn(messageNaN);
			
			// leave value empty or stays the same if previous value entered
			current.surge_capabilities = null;
			return;
		}

		gs.addInfoMessage(message); // UI message: help with testing and direct entry into table
		message += additionalInfo;
		gs.warn(message); // System log message with additional information
		current.surge_capabilities = null;
		
	} catch (error) {
		errUtil.errorLogger(error);
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>julius.fitzhugh-ctr</sys_created_by>
        <sys_created_on>2022-11-03 16:23:39</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>29590bfb97fe11106fa8b4b3f153af8f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>ReqCostEst - Surge Capabilities Limit</sys_name>
        <sys_overrides/>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy/>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_29590bfb97fe11106fa8b4b3f153af8f</sys_update_name>
        <sys_updated_by>julius.fitzhugh-ctr</sys_updated_by>
        <sys_updated_on>2022-11-03 16:23:39</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=29590bfb97fe11106fa8b4b3f153af8f"/>
</record_update>
