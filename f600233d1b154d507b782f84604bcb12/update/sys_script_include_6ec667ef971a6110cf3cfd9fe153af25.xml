<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.CostEstimate</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>ATAT class for use by Cost Estimate REST API.</description>
        <name>CostEstimate</name>
        <script><![CDATA[let CostEstimate = Class.create();
CostEstimate.prototype = {

    acquisitionPackage: null,
    errUtil: new ErrorHandler(),

    initialize: function(acquisitionPackage) {
        this.acquisitionPackage = acquisitionPackage;
    },

    /**
     * Supports Cost Estimate REST API
     * Transforms IGCE docgen payload to JSON data needed to display Cost Estimate summary on UI
     * @returns JSON structure organized by IDIQ clins with cost estimates per period of the PoP.
     * {
     *   "data":[],
     *   "subtotal":{},
     *   "surge":{},
     *   "total_price":{},
     *   "ditco_fee":{},
     *   "external_ordering_agency_fee":{},
     *   "total_with_surge_and_ordering_fee":{},
     *   "other_contracting_office_fee":{},
     *   "surge_and_fees":{},
     *   "grand_total_with_fee":{}
     * }
     * The array and objects properties above should contain JSON objects with the following keys:
     *  - "CLIN Type & Classification"
     *  - "Base Period"
     *  - "Option [1..x]"
     *  - "Total"
     */
    getData: function() {
        let igce = new Igce(this.acquisitionPackage);
        const igceTemplatePayload = JSON.parse(igce.getPayload()).templatePayload;
        const DITCO = igceTemplatePayload.contractingShop.name === "DITCO";
        const CONTRACTING_SHOP_FEE_PCT = igceTemplatePayload.contractingShop.fee; // different fees in same location for both DITCO and non-DITCO
        const SURGE_INCLUDED = igceTemplatePayload.surgeCapabilities;

        /**
         * Returns the sum of all values of type 'number' in the specified object
         * @param obj object containing number values
         * @returns the sum of all number values
         */
        let sumValues = function(obj) {
            return Object.values(obj)
                .filter(function(value) {
                    return typeof value === "number";
                })
                .reduce(function(result, v) {
                    return result + v;
                }, 0);
        };

        // Assemble array of unique CLINs
        let uniqueClins = igceTemplatePayload.periodsEstimate
            .flatMap(function(estimate) {
                return estimate.periodLineItems.map(function(lineItem) {
                    return lineItem.idiqClin;
                });
            })
            .filter(function(lineItem, index, self) {
                return self.indexOf(lineItem) === index;
            });


        // Assemble array of CLIN data for the 'data' property
        let uniquePeriods = []; // array of unique BASE and OPTION periods
        let dataArray = function() {
            let clinArray = uniqueClins
                .map(function(clin) {
                    let entry = {
                        "CLIN Type & Classification": clin,
                    };
                    igceTemplatePayload.periodsEstimate.forEach(function(estimate) {
                        let key;
                        if (estimate.period.periodType === "BASE") {
                            key = "Base Period";
                        } else if (estimate.period.periodType === "OPTION") {
                            // BASE period is always optionOrder 1, and first OPTION is 2, etc.
                            key = "Option " + (estimate.period.optionOrder - 1);
                        }
                        if (uniquePeriods.indexOf(key) === -1) {
                            uniquePeriods.push(key);
                        }
                        let value = estimate.periodLineItems
                            .filter(function(lineItem) {
                                return lineItem.idiqClin === clin;
                            })
                            .reduce(function(result, lineItem) {
                                return result + lineItem.unitPrice * lineItem.quantity;
                            }, 0);
                        entry[key] = value;
                    });

                    entry.Total = sumValues(entry);
                    return entry;
                })
                .sort(function(a, b) {
                    if (a["CLIN Type & Classification"] < b["CLIN Type & Classification"]) {
                        return -1;
                    }
                    if (a["CLIN Type & Classification"] > b["CLIN Type & Classification"]) {
                        return 1;
                    }
                    return 0;
                });
            return clinArray;
        };

        // Assemble object for the 'subtotal' property
        let subtotalObject = function() {
            let obj = uniquePeriods.reduce(function(periodResult, period) {
                periodResult[period] = dataArray()
                    .filter(function(entry) {
                        return entry[period];
                    })
                    .map(function(entry) {
                        return entry[period];
                    })
                    .reduce(function(subtotalResult, subtotalValue) {
                        return subtotalResult + subtotalValue;
                    }, 0);
                return periodResult;
            }, {});
            obj.Total = Object.values(obj).reduce(function(
                    result,
                    v
                ) {
                    return result + v;
                },
                0);
            obj.Description = "subtotal of all clin data";
            return obj;
        };

        // Assemble object for the 'surge' property
        let surgeObject = function() {
            let obj = null;
            if (SURGE_INCLUDED) {
                obj = Object.keys(subtotalObject()).reduce(function(result, key) {
                    result[key] = subtotalObject()[key] * (igceTemplatePayload.surgeCapabilities * 0.01);
                    return result;
                }, {});
                obj.Description = "subtotal * surge percentage (" + igceTemplatePayload.surgeCapabilities + "%)";
            }
            return obj;
        };

        // Assemble object for the 'total_price' property
        let totalPriceObject = function() {
            let obj = Object.keys(subtotalObject()).reduce(function(
                result,
                key
            ) {
                result[key] = subtotalObject()[key];
                if (SURGE_INCLUDED) {
                    result[key] += surgeObject()[key];
                }
                return result;
            }, {});
            obj.Description = SURGE_INCLUDED ? "subtotal + surge" : "subtotal + surge (none)";
            return obj;
        };

        // Assemble object for the 'ditco_fee' property
        // When DITCO, they have their own fixed fee.
        let ditcoFeeObject = function() {
            let obj = null;
            if (DITCO) {
                obj = Object.keys(totalPriceObject()).reduce(function(result, key) {
                    result[key] = totalPriceObject()[key] * (CONTRACTING_SHOP_FEE_PCT * 0.01);
                    return result;
                }, {});
                obj.Description = "total_price * ditco fee percentage (" + CONTRACTING_SHOP_FEE_PCT + "%)";
            }
            return obj;
        };

        // Assemble object for the 'external_ordering_agency_fee' property
        // When non-DITCO, a mandatory fixed fee is charged.
        let externalOrderingAgencyFeeObject = function() {
            let obj = null;
            if (!DITCO) {
                const EXTERNAL_ORDERING_AGENCY_FEE_PCT = 1;
                obj = {
                    // This unique snowflake is needed because this fee is presented on IGCE 
                    // spreadsheet among the CLIN rows above the Subtotal row (currently #22);
                    // all other calculated figures are included at or below the Subtotal row.
                    "CLIN Type & Classification": "External ordering agency fee (" + EXTERNAL_ORDERING_AGENCY_FEE_PCT + "%)",
                };
                Object.assign(
                    obj,
                    Object.keys(totalPriceObject()).reduce(function(result, key) {
                        result[key] = totalPriceObject()[key] * (EXTERNAL_ORDERING_AGENCY_FEE_PCT * 0.01);
                        return result;
                    }, {})
                );
                obj.Description = "total_price * external ordering agency fee percentage (" + EXTERNAL_ORDERING_AGENCY_FEE_PCT + "%)";
            }
            return obj;
        };

        // Assemble object for the 'total_with_surge_and_ordering_fee' property
        let totalWithSurgeAndOrderingFeeObject = function() {
            let obj = null;
            if (!DITCO) {
                obj = Object.keys(totalPriceObject()).reduce(function(result, key) {
                    result[key] = totalPriceObject()[key] + externalOrderingAgencyFeeObject()[key];
                    return result;
                }, {});
                obj.Description = "total_price + external_ordering_agency_fee";
            }
            return obj;
        };

        // Assemble object for the 'other_contracting_office_fee' property
        // When non-DITCO, the contracting office may have their own variable fee.
        let otherContractingOfficeFeeObject = function() {
            let obj = null;
            if (!DITCO) {
                obj = Object.keys(totalWithSurgeAndOrderingFeeObject()).reduce(function(result, key) {
                    result[key] = totalWithSurgeAndOrderingFeeObject()[key] * (CONTRACTING_SHOP_FEE_PCT * 0.01);
                    return result;
                }, {});
                obj.Description = "total_with_surge_and_ordering_fee * other contracting office fee percentage (" + CONTRACTING_SHOP_FEE_PCT + "%)";
            }
            return obj;
        };

        // Assemble object for the 'surge_and_fees' property
        let surgeAndFeesObject = function() {
            let obj = null;
            if (DITCO && SURGE_INCLUDED) {
                obj = Object.keys(ditcoFeeObject()).reduce(function(result, key) {
                    result[key] = surgeObject()[key] + ditcoFeeObject()[key];
                    return result;
                }, {});
                obj.Description = "surge + ditco_fee";
            }
            if (DITCO && !SURGE_INCLUDED) {
                obj = ditcoFeeObject;
                obj.Description = "surge (none) + ditco_fee";
            }
            if (!DITCO && SURGE_INCLUDED) {
                obj = Object.keys(externalOrderingAgencyFeeObject()).reduce(function(result, key) {
                    result[key] = surgeObject()[key] + externalOrderingAgencyFeeObject()[key] + otherContractingOfficeFeeObject()[key];
                    return result;
                }, {});
                delete obj["CLIN Type & Classification"]; //remove unique snowflake key introduced by ext ord agency
                obj.Description = "surge + external_ordering_agency_fee + other_contracting_office_fee";
            }
            if (!DITCO && !SURGE_INCLUDED) {
                obj = Object.keys(externalOrderingAgencyFeeObject()).reduce(function(result, key) {
                    result[key] = externalOrderingAgencyFeeObject()[key] + otherContractingOfficeFeeObject()[key];
                    return result;
                }, {});
                obj.Description = "surge (none) + external_ordering_agency_fee + other_contracting_office_fee";
            }
            return obj;
        };

        // Assemble object for the 'grand_total_with_fee' property
        let grandTotalWithFeeObject = function() {
            let obj = null;
            if (DITCO) {
                obj = Object.keys(totalPriceObject()).reduce(function(result, key) {
                    result[key] = totalPriceObject()[key] + ditcoFeeObject()[key];
                    return result;
                }, {});
                obj.Description = "total_price + ditco_fee";
            }
            if (!DITCO) {
                obj = Object.keys(totalWithSurgeAndOrderingFeeObject()).reduce(function(result, key) {
                    result[key] = totalWithSurgeAndOrderingFeeObject()[key] + otherContractingOfficeFeeObject()[key];
                    return result;
                }, {});
                obj.Description = "total_with_surge_and_ordering_fee + other_contracting_office_fee";
            }
            return obj;
        };

        try {
            let costEstimateData = {
                data: dataArray(),
                subtotal: subtotalObject(),
                surge: surgeObject(),
                total_price: totalPriceObject(),
                ditco_fee: ditcoFeeObject(),
                external_ordering_agency_fee: externalOrderingAgencyFeeObject(),
                total_with_surge_and_ordering_fee: totalWithSurgeAndOrderingFeeObject(),
                other_contracting_office_fee: otherContractingOfficeFeeObject(),
                surge_and_fees: surgeAndFeesObject(),
                grand_total_with_fee: grandTotalWithFeeObject(),
            };
            return costEstimateData;
        } catch (error) {
            throw this.errUtil.createError(
                "CostEstimate --> getData(): " + error,
                this.errUtil.METHOD_ERROR
            );
        }
    },

    getGrandTotal: function() {
        return this.getData().grand_total_with_fee;
    },

    getSummaryRecord: function(key) {
        try {
            let summary = this.getData();
            return summary.total_price[key];
        } catch (error) {
            gs.debug("Could not calculate Cost Estimate", error);
            return 0;
        }
    },

    getTotalEstimate: function() {
        return this.getSummaryRecord("Total");
    },

    getBaseYearTotalEstimate: function() {
        return this.getSummaryRecord("Base Period");
    },

    type: 'CostEstimate'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>jason.d.burkert.ctr@mail.mil</sys_created_by>
        <sys_created_on>2023-04-25 22:14:58</sys_created_on>
        <sys_id>6ec667ef971a6110cf3cfd9fe153af25</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>CostEstimate</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_6ec667ef971a6110cf3cfd9fe153af25</sys_update_name>
        <sys_updated_by>jason.d.burkert.ctr@mail.mil</sys_updated_by>
        <sys_updated_on>2023-06-15 19:32:37</sys_updated_on>
    </sys_script_include>
</record_update>
