<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.PackageAttachments</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>ATAT class for gathering unsigned and signed documents with in an acquitiong package to allow for &#13;
downloading or attaching the documents to an email and sent to a recipient. The methods allow&#13;
attachmenting the actual document in an email, which is not supported with the Flow Designer &#13;
"Send Email" action. The alternative would be to add a hyperlink to download the attachments&#13;
directly from ServiceNow.&#13;
&#13;
It is also possible to attach documents from within Flow Designer using core ServiceNow actions after&#13;
using the "Send Email" action, and is partially used for one of the attachments (Fudning Request docs).&#13;
- Copy Attachment (action)&#13;
- Delete Attachment (action)</description>
        <name>PackageAttachments</name>
        <script><![CDATA[var PackageAttachments = Class.create();
PackageAttachments.prototype = {
  UNSIGNED_DOCS_TABLE: "x_g_dis_atat_package_documents_unsigned",
  SIGNED_DOCS_TABLE: "x_g_dis_atat_package_documents_signed",
  PKG_TABLE: "x_g_dis_atat_acquisition_package",
  REQ_COST_EST_TABLE: "x_g_dis_atat_requirements_cost_estimate",
  CURR_ENV_TABLE: "x_g_dis_atat_current_environment",
  FS_FORM_TABLE: "x_g_dis_atat_funding_request_fs_form",
  MIPR_TABLE: "x_g_dis_atat_funding_request_mipr",
  EMAIL_TABLE: "sys_email",

  acqusitionPackage: null,
  unsignedRecSysId: null,
  signedRecSysId: null,
  reqCostEstRecSysId: null,
  currentEnvRecSysId: null,
  miprSysId: null,
  fsFormSysId: null,

  attachments: new GlideSysAttachment(),
  errUtil: new ErrorHandler(),

  initialize: function(acqPackageRecord) {
    this.acquisitionPackage = acqPackageRecord;  
    this.currentEnvRecSysId = acqPackageRecord.current_environment.sys_id.toString();

    // Package Unsigned Record
    var unsignedDocuments = new GlideRecord(this.UNSIGNED_DOCS_TABLE);
    unsignedDocuments.addQuery("acquisition_package", acqPackageRecord.sys_id.toString());
    unsignedDocuments.query();
    if (unsignedDocuments.next()) {
      this.unsignedRecSysId = unsignedDocuments.sys_id.toString();
    }

    // Package Signed Record
    var signedDocuments = new GlideRecord(this.SIGNED_DOCS_TABLE);
    signedDocuments.addQuery("acquisition_package", acqPackageRecord.sys_id.toString());
    signedDocuments.query();
    if (signedDocuments.next()) {
      this.signedRecSysId = signedDocuments.sys_id.toString();
    }

    // Package Requirements Cost Estimate Record 
    var reqCostEstRec = new GlideRecord(this.REQ_COST_EST_TABLE);
    reqCostEstRec.addQuery("acquisition_package", acqPackageRecord.sys_id.toString());
    reqCostEstRec.query();
    if (reqCostEstRec.next()) {
      this.reqCostEstRecSysId = reqCostEstRec.sys_id.toString();
    }

    // Funidng Request Record
    var fundingRequest = this.acquisitionPackage.funding_request;
    var fundingType = fundingRequest.funding_request_type.toString();
    if (fundingType === "MIPR") {
      this.miprSysId= fundingRequest.mipr.toString();
    }
    if (fundingType === "FS_FORM") {
      this.fsFormSysId = fundingRequest.fs_form.toString();
    }
  },
  /**
   * Delete documents on the Package Documents Unsigned record.
   *
   * Main purpose of this method is to delete documents that will be signed by
   * the Mission Owner in DAPPS and uploaded to the Package Document Signed record,
   * or documents that are will be uploaded again (e.g., J&A and MRR templates).
   *
   * Alternatively, there is a manual process for copying individual records, however
   * in the interest of time and to keep the complexcity low, all documents will be copied
   * and then documents that require a signature will be deleted.
   *
   * Ref for copying a single attachment
   * - see https://snprotips.com/blog/2016/2/25/understanding-and-using-glideattachment#4
   *
   * @param {string|Array} filesToDelete - an array of file names that can be deleted
   * @return {void}
   */
  deleteUnsignedDocumentAttachments: function(filesToDelete) {
    try {
      // get all attachments and delete the ones based on the document name.
      var attachmentsToDelete = this.attachments.getAttachments(
        this.UNSIGNED_DOCS_TABLE,
        this.unsignedRecSysId
      );

      while(attachmentsToDelete.next()) {
        var attachmentSysId = attachmentsToDelete.sys_id.toString();
        var fileName = attachmentsToDelete.file_name.toString();

        if (listContains(fileName, filesToDelete)) {
          var message = "Deleting attachment: " + fileName;
          message += " (SysId: " + attachmentSysId + ").";
          gs.debug(message);
          this.attachments.deleteAttachment(attachmentSysId);
        }
      }
    } catch (error) {
      throw this.errUtil.createError(
        "PackageAttachments --> deleteUnsignedDocumentAttachments(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }
  },
  /**
   * Delete all attachments on the Package Unsigned Document record.
   *
   * @return {void}
   */
  deleteAllUnsignedDocumentAttachments: function() {
    try {
      // get the unsigned docs record (contains all unsigned docs)
      var foundAttachments = this.attachments.getAttachments(this.UNSIGNED_DOCS_TABLE, this.unsignedRecSysId);

      // delete attached documnts on the unsigned record
      while(foundAttachments.next()) {
        var attachmentSysId = foundAttachments.sys_id.toString();
        var message = "Deleting attachment: " + foundAttachments.file_name.toString();
        message += " (SysId: " + attachmentSysId + ").";
        gs.debug(message);
        this.attachments.deleteAttachment(attachmentSysId);
      }
    } catch (error) {
      throw this.errUtil.createError(
        "PackageAttachments --> deleteAllUnsignedAttachments(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }
  },

  /**
   * Copy attachments from the appropriate Funding Request documents (MIPR or FS_FORM)
   * to the unsigned documents record. 
   *
   * Obsolete - method left in as documentation purposes of trial and error. Can be removed
   * or refactoed based on needs.
   *
   * This requires some manual manipulation of the attachment record because the attachments
   * are saved in a 'file_attachment' column which ServiceNow adds "ZZ_YY" as a prefix to
   * prevent the document from showing as an attachment at the top of the record.
   * - See https://support.servicenow.com/kb?id=kb_article_view&sysparm_article=KB0868420
   *
   * The GlideSysAttachment.copy() method does not work properly because of the "ZZ_YY"
   * prefix when trying to copy attachments. However when the "ZZ_YY" is removed it works
   * as expected. Caution: this requires modifying the "sys_attachment" table which is
   * in the global scope (i.g., outside of the ATAT scoped application), which may
   * require adjustments to scope privilege or alternative. 
   *
   * @deprecated
   * @param {GlideRecord} fundingRequest - package funding request record
   * @param {string} fundingType - package funding type (FS_FORM or MIPR);
   * @return {void}
   */
  copyFundingRequestDocuments: function(fundingRequest, fundingType) {
    try {
      var fileAttachmentCol;
      if (fundingType === "MIPR") {
        var miprSysId = fundingRequest.mipr.toString();
        fileAttachmentCol = new GlideRecord("sys_attachment");
        fileAttachmentCol.addQuery("table_sys_id", miprSysId);
        fileAttachmentCol.query();

        while(fileAttachmentCol.next()) {
          // remove "ZZ_YY" from table name
          fileAttachmentCol.table_name = fileAttachmentCol.table_name.replace("ZZ_YY", "");
          // BUG?: needs access to global scope to allow sys_attachment updates to attachment record table name
          fileAttachmentCol.update();
        }

        // copy files to unsigned
        this.attachments.copy(this.MIPR_TABLE, miprSysId, this.UNSIGNED_DOCS_TABLE, this.unsignedRecSysId);
      }

      if (fundingType === "FS_FORM") {
        var fsFormSysId = fundingRequest.fs_form.toString();
        fileAttachmentCol = new GlideRecord("sys_attachment");
        fileAttachmentCol.addQuery("table_sys_id", fsFormSysId);
        fileAttachmentCol.query();

        while(fileAttachmentCol.next()) {
          // remove "ZZ_YY" from table name
          fileAttachmentCol.table_name = fileAttachmentCol.table_name.replace("ZZ_YY", "");
          // BUG?: needs access to global scope to allow sys_attachment updates to attachment record table name
          fileAttachmentCol.update();
        }
        // copy files to signed
        this.attachments.copy(this.FS_FORM_TABLE, fsFromSysId, this.UNSIGNED_DOCS_TABLE, this.unsignedRecSysId);
      }
    } catch (error) {
      throw this.errUtil.createError(
        "PackageAttachments --> copyFundingRequestDocuments(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }
  },

  /**
   * Copy attachments from a source record to the unsigned record
   *
   * @param {string} sourceTable - source table
   * @param {string} sourceSysId - sysId of the record in the soruce table
   * @return {void}
   */
  copyAttachmentsToUnsignedRecord: function(sourceTable, sourceSysId) {
    try {
      this.attachments.copy(sourceTable, sourceSysId, this.UNSIGNED_DOCS_TABLE, this.unsignedRecSysId);
    } catch (error) {
      throw this.errUtil.createError(
        "PackageAttachments --> copyAttachmentsToUnsignedRecord(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }
  },

  /**
   * Prepare the Package Documents Unsigned record to copy the attachments that will be sent in an email
   * to DITCO. Any operations needed to get the unsigned record in a state to be sent in an Email.
   *
   * After generating all the documents, the documents are gathered into the Package Documents
   * Unsigned record for the user to download and sign specific documents (see 
   * gatherUnsignedDocumentsForDownload). This method is to provide 
   * any logic that is needed prior to copying the attachments to the email, which at the moemnt
   * is removing attachemnts to prevent duplication.
   *
   * NOTE:It is probably a good idea to limit the user from uploading documents of the same name.
   *
   * @return {void}
   */
  prepareUnsignedDocumentsToEmail: function() {
    try {
      var signedAndUnsignedFilesTotDelete = [
        // documents that will be signed by user and uploaded to the Package Documents Signed record
        "RequirementsChecklist.docx",
        "IGCE.xlsx", 
        "IncrementalFundingPlan.docx",
        // documents that are unsigned and will be uploaded again to Package Documents Unsigned record
        "JWCC Market Research Report (Sole Source)_Template.docx",
        "JWCC J&A Template_Template.docx"
      ];
      this.deleteUnsignedDocumentAttachments(signedAndUnsignedFilesToDelete);
      

    } catch (error) {
      throw this.errUtil.createError(
        "PackageAttachments --> prepareUnsignedDocumentsToEmail(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }
  },
  /**
   * Gather all unsigned package documents and attach to the Package Documents Unsigned after
   * generation documents to download in step 9.
   *
   * @return {void}
   */
  gatherUnsignedDocumentsForDownload: function() {
    try {
      this.deleteAllUnsignedDocumentAttachments();
      this.copyAttachmentsToUnsignedRecord(this.PKG_TABLE, this.acquisitionPackage.sys_id.toString());
      this.copyAttachmentsToUnsignedRecord(this.CURR_ENV_TABLE, this.currentEnvRecSysId);
      this.copyAttachmentsToUnsignedRecord(this.REQ_COST_EST_TABLE, this.reqCostEstRecSysId);

      // NOTE: because modifying the global scope for sys_attachment is needed, this was commented
      // out and funding request attachments are added directly in Flow Designer using the record 
      // sysId which works and is less complex. This original work around for trying to attach
      // a file attachment column type is no longer needed.
      // var fundingRequest = this.acquisitionPackage.funding_request;
      // var fundingType = fundingRequest.funding_request_type.toString();
      // this.copyFundingRequestDocuments(fundingRequest, fundingType);
      
    } catch (error) {
      throw this.errUtil.createError(
        "PackageAttachments --> gatherUnsignedDocumentsForDownload(): " + error,
        this.errUtil.METHOD_ERROR
      );
    }
  },
  /**
   * Copy all package documents over to the email to be sent.
   *
   * Obsolete - method left in as documentation for trial and error of copying attachments
   * to emails. Can be removed or refactored based on needs.
   *
   * @deprecated
   * @return {void}
   */
  copyDocumentsToEmail: function(emailSysId) {
    try {

      this.prepareUnsignedDocumentsToEmail();
      // NOTE: does not properly copy when used in Flow Deisnger so moved below inside of FD action
      // this.attachments.copy(this.UNSIGNED_DOCS_TABLE, this.unsignedSysId, this.EMAIL_TABLE, emailSysId);
      // this.attachments.copy(this.SIGNED_DOCS_TABLE, this.signedSysId, this.EMAIL_TABLE, emailSysId);

    } catch (error) {
      var errorMessage = "Error copying attachments to Email. " + error;
      this.errUtil.errorLogger(
        this.errUtil.createError(
          errorMessage,
          this.errUtil.INVALID_INPUT
        )
      );
    }
  },
  
  type: 'PackageAttachments'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>julius.fitzhugh-ctr</sys_created_by>
        <sys_created_on>2023-02-09 05:45:20</sys_created_on>
        <sys_id>4f2ce55347b8a110f39f7601e36d430a</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>PackageAttachments</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_4f2ce55347b8a110f39f7601e36d430a</sys_update_name>
        <sys_updated_by>julius.fitzhugh-ctr</sys_updated_by>
        <sys_updated_on>2023-02-16 23:24:10</sys_updated_on>
    </sys_script_include>
</record_update>
