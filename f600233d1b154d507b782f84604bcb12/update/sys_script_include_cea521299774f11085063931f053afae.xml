<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.AclService</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>AclService</name>
        <script><![CDATA[var AclService = Class.create();
AclService.prototype = {
    initialize: function() {
    },
	
	/**
   * Concatenates an array of comma-delimited roles. E.g., given ["a,b", "c", "d,e"], returns "a,b,c,d,e".
   *
   * @param {string} roleLists - a list of comma-delimited lists of roles
   * @return {string} a single concatenated comma-delimited list of roles
   */	
	constructAccessList: function(roleLists) {	
		let accessList = "";
		if (roleLists) {
			roleLists.forEach(function(roleList) {
				if (roleList) {
					accessList += accessList ? "," : "";
					accessList += roleList ? roleList : "";					
				}
			});
		}
		return accessList;
	},
	
	/**
   * Returns a boolean indicating whether the current user has access to a given resource.
   *
   * @param {object} aclObject - custom object with relevant properties for the ACL decision
   * @return {boolean} authorization decision
   */	
	hasPermission: function(aclObject) {
		var accessList = aclObject.accessList.toString().split(",");
		var userHasPermission = listContains(aclObject.userSysId, accessList);
		var matchedRoles = aclObject.userRoles.filter(function(userRole) {
			return listContains(userRole, aclObject.allowedRoles);
		});
		var userHasRole = matchedRoles.length > 0;
		return userHasPermission || userHasRole;
	},

    type: 'AclService'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>jeffsegal</sys_created_by>
        <sys_created_on>2023-08-21 14:50:49</sys_created_on>
        <sys_id>cea521299774f11085063931f053afae</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>AclService</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_cea521299774f11085063931f053afae</sys_update_name>
        <sys_updated_by>jeffsegal</sys_updated_by>
        <sys_updated_on>2023-08-21 15:20:48</sys_updated_on>
    </sys_script_include>
</record_update>
