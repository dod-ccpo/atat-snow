<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.AlertAnalyzer</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>This class is responsible for generating new alert or notifications for dispatch.</description>
        <name>AlertAnalyzer</name>
        <script><![CDATA[class AlertAnalyzer {

    constructor() {
        this.ALERT_TABLE = "x_g_dis_atat_alerts_alert";
        this.CLINS_TABLE = "x_g_dis_atat_clin";
        this.PORTFOLIO_TABLE = "x_g_dis_atat_portfolio";
        this.TRACKING_TABLE = "x_g_dis_atat_alerts_tracking";
    }

    analyze() {
        const portfolios = new global.GlideQuery(this.PORTFOLIO_TABLE)
            .select('name', 'active_task_order')
            .toArray(100);

        const alerts = new global.GlideQuery(this.ALERT_TABLE)
            .select('name', 'type', 'threshold')
            .toArray(100);

        const analyzed = this.analyzePortfolios(portfolios, alerts);
        this.updateTrackingTable(analyzed);
        return analyzed;
    }

    analyzePortfolios(portfolios, alerts) {
        return portfolios.map((portfolio) => {
            const clins = new global.GlideQuery(this.CLINS_TABLE)
                .where('task_order', portfolio.active_task_order)
                .select('actual_funds_spent', 'funds_total', 'pop_end_date')
                .toArray(100)
                .map((clin) => this.analyzeClin(clin, alerts));
            return {
                portfolio,
                clins
            };
        });
    }

    analyzeClin(clin, alerts) {
        const percentRemaining = this.calculatePercentRemaining(clin);
        const daysRemaining = this.calculateDaysRemaining(clin);
        const analyzedAlerts = this.analyzeAlerts(clin, alerts, daysRemaining, percentRemaining);
        return {
            percentRemaining,
            daysRemaining: daysRemaining.getDisplayValue(),
            clinSysId: clin.sys_id,
            analyzedAlerts
        };
    }

    analyzeAlerts(clin, alerts, daysRemaining, percentRemaining) {
        const analyzedAlerts = alerts.reduce((triggeredAlerts, alert) => {
            if ((alert.type === 'time' && daysRemaining.getDayPart() <= alert.threshold) ||
                (alert.type === 'funds' && percentRemaining <= alert.threshold)) {
                return [...triggeredAlerts, alert];
            }
            return triggeredAlerts;
        }, []);
        return analyzedAlerts;
    }

    updateTrackingTable(analyzed) {
        analyzed.forEach((i) => {
            const portfolio = i.portfolio;
            const clins = i.clins;
            clins.forEach((clin) => {
                clin.analyzedAlerts?.forEach((alert) => {
                    const res = new global.GlideQuery(this.TRACKING_TABLE)
                        .where('portfolio', portfolio.sys_id)
                        .where('alert', alert.sys_id)
                        .where('clin', clin.clinSysId)
                        .select()
                        .toArray(100);
                    if (res.length === 0) {
                        new global.GlideQuery(this.TRACKING_TABLE)
                            .insert({
                                alert: alert.sys_id,
                                clin: clin.clinSysId,
                                portfolio: portfolio.sys_id,
                                status: "new",
                            });
                    }
                });
            });
        });
    }

    calculatePercentRemaining(clin) {
        const {
            actual_funds_spent,
            funds_total
        } = clin;
        if (actual_funds_spent <= 0.0 || funds_total <= 0.0) {
            return 100;
        }
        const difference = funds_total - actual_funds_spent;
        return (difference / funds_total) * 100;
    }

    calculateDaysRemaining(clin) {
        return GlideDateTime.subtract(
            new GlideDateTime(),
            new GlideDateTime(clin.pop_end_date)
        );
    }
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>stephen.hayes</sys_created_by>
        <sys_created_on>2023-10-17 20:49:39</sys_created_on>
        <sys_id>4560680447463110ee827d7ba26d4331</sys_id>
        <sys_mod_count>93</sys_mod_count>
        <sys_name>AlertAnalyzer</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_4560680447463110ee827d7ba26d4331</sys_update_name>
        <sys_updated_by>stephen.hayes</sys_updated_by>
        <sys_updated_on>2023-10-18 11:59:44</sys_updated_on>
    </sys_script_include>
</record_update>
