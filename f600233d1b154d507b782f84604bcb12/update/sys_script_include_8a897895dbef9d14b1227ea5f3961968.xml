<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_g_dis_atat.EvalPlan</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>ATAT class for creating an Evaluation Plan payload and related functionality.&#13;
Payload is sent to the HOTH API for document generation.</description>
        <name>EvalPlan</name>
        <script><![CDATA[var EvalPlan = Class.create();
EvalPlan.prototype = {

    errUtil: new ErrorHandler(),
    acquisitionPackage: null,

    initialize: function(acqPackage) {
        this.acquisitionPackage = acqPackage;
    },

    /**
     * Gathers all information needed for Eval Plan document generation and 
     * creates a payload. Instantiate the Eval Plan class with an acquisition
     * package record before using this method.
     * 
     * return {object} - an Eval Plan payload for HOTH API
     */
    getPayload: function() {
        try {
            var evalPlan = this.acquisitionPackage.evaluation_plan;
            var projectOverview = this.acquisitionPackage.project_overview;
            var EVAL_PLAN_ASSESSMENT_AREA_TABLE = "x_g_dis_atat_eval_plan_assessment_area";
            var EVAL_PLAN_DIFFERENTIATOR_TABLE = "x_g_dis_atat_eval_plan_differentiator";
			// encompasses the existance of both compliance standards, and assessment areas
            var includeCustomSpecificationsFlag = convertToBoolean(evalPlan.has_custom_specifications.toString());
            var includeCustomDifferentiatorsFlag = false;
            if (evalPlan) {
                return {
                    documentType: "EVALUATION_PLAN",
                    templatePayload: {
                        taskOrderTitle: projectOverview.title ? projectOverview.title.toString() : null,
                        sourceSelection: evalPlan.source_selection ? evalPlan.source_selection.toString() : null,
                        method: evalPlan.method ? evalPlan.method.toString() : null,

                        standardSpecifications: evalPlan.standard_specifications ? evalPlan.standard_specifications.toString().split(",")
                            .filter(function(recordSysId) {
                                var record = new GlideRecord(EVAL_PLAN_ASSESSMENT_AREA_TABLE);
                                record.get(recordSysId);
								// CustomAssessment is a special row in the Eval Plan Assessment Area ref table
                                if (record.name.toString() === "CustomAssessment") { 
                                    return false; // filter out this option
                                }
                                return true;
                            })
                            .map(function(recordSysId) {
                                var record = new GlideRecord(EVAL_PLAN_ASSESSMENT_AREA_TABLE);
                                record.get(recordSysId);
                                return record.description.toString();
                            }) : [],

                        customSpecifications: includeCustomSpecificationsFlag && evalPlan.custom_specifications ? evalPlan.custom_specifications.toString().split(",")
                            .map(function(customSpecification) {
                                return customSpecification;
                            }) : [],

                        standardDifferentiators: evalPlan.standard_differentiators ? evalPlan.standard_differentiators.toString().split(",")
                            .filter(function(recordSysId) {
                                var record = new GlideRecord(EVAL_PLAN_DIFFERENTIATOR_TABLE);
                                record.get(recordSysId);
								// CustomDifferentiators is a special row in the Eval Plan Differentiator ref table
                                if (record.name.toString() === "CustomDifferentiators") { 
                                    includeCustomDifferentiatorsFlag = true; // include customs later
                                    return false; // filter out this option
                                }
                                return true;
                            })
                            .map(function(recordSysId) {
                                var record = new GlideRecord(EVAL_PLAN_DIFFERENTIATOR_TABLE);
                                record.get(recordSysId);
                                return record.description.toString();
                            }) : [],

                        customDifferentiators: includeCustomDifferentiatorsFlag && evalPlan.custom_differentiators ? evalPlan.custom_differentiators.toString().split(",")
                            .map(function(customDifferentiator) {
                                return customDifferentiator;
                            }) : []
                    }
                };
            } else {
                throw this.errUtil.createError("No Eval Plan found for this Acq Package. ", this.errUtil.INVALID_INPUT);
            }
        } catch (err) {
            throw this.errUtil.createError("Error getting Eval Plan payload. " + err, this.errUtil.INVALID_INPUT);
        }
    },

    type: 'EvalPlan'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>1370228783.CTR</sys_created_by>
        <sys_created_on>2022-12-02 17:05:22</sys_created_on>
        <sys_id>8a897895dbef9d14b1227ea5f3961968</sys_id>
        <sys_mod_count>43</sys_mod_count>
        <sys_name>EvalPlan</sys_name>
        <sys_package display_value="ATAT" source="x_g_dis_atat">f600233d1b154d507b782f84604bcb12</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ATAT">f600233d1b154d507b782f84604bcb12</sys_scope>
        <sys_update_name>sys_script_include_8a897895dbef9d14b1227ea5f3961968</sys_update_name>
        <sys_updated_by>1370228783.CTR</sys_updated_by>
        <sys_updated_on>2023-06-21 20:59:25</sys_updated_on>
    </sys_script_include>
</record_update>
